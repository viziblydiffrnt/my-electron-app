[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "api/.external-ecmascript.js",
    "static": true,
    "longname": "api/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "api/import.js",
    "content": "import debug from 'debug';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport path from 'path';\n\nimport initGit from '../init/init-git';\nimport { deps, devDeps, exactDevDeps } from '../init/init-npm';\n\nimport asyncOra from '../util/ora-handler';\nimport { info, warn } from '../util/messages';\nimport installDepList from '../util/install-dependencies';\nimport readPackageJSON from '../util/read-package-json';\nimport confirmIfInteractive from '../util/confirm-if-interactive';\nimport { yarnOrNpmSpawn, hasYarn } from '../util/yarn-or-npm';\n\nconst d = debug('electron-forge:import');\n\n/**\n * @typedef {Object} ImportOptions\n * @property {string} [dir=process.cwd()] The path to the app to be imported\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [updateScripts=true] Whether to update the modules package.json scripts to be electron-forge commands\n * @property {string} [outDir=`${dir}/out`] The path to the directory containing generated distributables\n */\n\n/**\n * Attempt to import a given module directory to the Electron Forge standard.\n *\n * - Replaces the prebuilt electron package with the one that integrates with `electron-compile`\n * - Sets up `git` and the correct NPM dependencies\n * - Adds a template forge config to `package.json`\n *\n * @param {ImportOptions} providedOptions - Options for the import method\n * @return {Promise} Will resolve when the import process is complete\n */\nexport default async (providedOptions = {}) => {\n  const { dir, interactive, updateScripts } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    updateScripts: true,\n  }, providedOptions);\n\n  const outDir = providedOptions.outDir || 'out';\n  asyncOra.interactive = interactive;\n\n  d(`Attempting to import project in: ${dir}`);\n  if (!await fs.pathExists(dir) || !await fs.pathExists(path.resolve(dir, 'package.json'))) {\n    throw `We couldn't find a project in: ${dir}`;\n  }\n\n  // eslint-disable-next-line max-len\n  const confirm = await confirmIfInteractive(interactive, `WARNING: We will now attempt to import: \"${dir}\".  This will involve modifying some files, are you sure you want to continue?`);\n\n  if (!confirm) {\n    process.exit(0);\n  }\n\n  await initGit(dir);\n\n  let packageJSON = await readPackageJSON(dir);\n  if (packageJSON.config && packageJSON.config.forge) {\n    warn(interactive, 'It looks like this project is already configured for \"electron-forge\"'.green);\n    const shouldContinue = await confirmIfInteractive(interactive, 'Are you sure you want to continue?');\n\n    if (!shouldContinue) {\n      process.exit(0);\n    }\n  }\n\n  // eslint-disable-next-line max-len\n  const shouldChangeMain = await confirmIfInteractive(interactive, 'Do you want us to change the \"main\" attribute of your package.json?  If you are currently using babel and pointing to a \"build\" directory say yes.', false);\n  if (shouldChangeMain) {\n    const { newMain } = await inquirer.createPromptModule()({\n      type: 'input',\n      name: 'newMain',\n      default: packageJSON.main,\n      message: 'Enter the relative path to your uncompiled main file',\n    });\n    packageJSON.main = newMain;\n  }\n\n  packageJSON.dependencies = packageJSON.dependencies || {};\n  packageJSON.devDependencies = packageJSON.devDependencies || {};\n\n  const keys = Object.keys(packageJSON.dependencies).concat(Object.keys(packageJSON.devDependencies));\n  const buildToolPackages = {\n    'electron-builder': 'provides mostly equivalent functionality',\n    'electron-download': 'already uses this module as a transitive dependency',\n    'electron-installer-debian': 'already uses this module as a transitive dependency',\n    'electron-installer-dmg': 'already uses this module as a transitive dependency',\n    'electron-installer-flatpak': 'already uses this module as a transitive dependency',\n    'electron-installer-redhat': 'already uses this module as a transitive dependency',\n    'electron-osx-sign': 'already uses this module as a transitive dependency',\n    'electron-packager': 'already uses this module as a transitive dependency',\n    'electron-winstaller': 'already uses this module as a transitive dependency',\n  };\n\n  let electronName;\n  for (const key of keys) {\n    if (key === 'electron' || key === 'electron-prebuilt') {\n      delete packageJSON.dependencies[key];\n      delete packageJSON.devDependencies[key];\n      electronName = key;\n    } else if (buildToolPackages[key]) {\n      const explanation = buildToolPackages[key];\n      // eslint-disable-next-line max-len\n      const shouldRemoveDependency = await confirmIfInteractive(interactive, `Do you want us to remove the \"${key}\" dependency in package.json? Electron Forge ${explanation}.`);\n\n      if (shouldRemoveDependency) {\n        delete packageJSON.dependencies[key];\n        delete packageJSON.devDependencies[key];\n      }\n    }\n  }\n\n  packageJSON.scripts = packageJSON.scripts || {};\n  d('reading current scripts object:', packageJSON.scripts);\n\n  const updatePackageScript = async (scriptName, newValue) => {\n    if (packageJSON.scripts[scriptName] !== newValue) {\n      // eslint-disable-next-line max-len\n      const shouldUpdate = await confirmIfInteractive(interactive, `Do you want us to update the \"${scriptName}\" script to instead call the electron-forge task \"${newValue}\"`, updateScripts);\n      if (shouldUpdate) {\n        packageJSON.scripts[scriptName] = newValue;\n      }\n    }\n  };\n\n  await updatePackageScript('start', 'electron-forge start');\n  await updatePackageScript('package', 'electron-forge package');\n  await updatePackageScript('make', 'electron-forge make');\n\n  d('forgified scripts object:', packageJSON.scripts);\n\n  const writeChanges = async () => {\n    await asyncOra('Writing modified package.json file', async () => {\n      await fs.writeFile(path.resolve(dir, 'package.json'), `${JSON.stringify(packageJSON, null, 2)}\\n`);\n    });\n  };\n\n  let electronVersion;\n  if (electronName) {\n    const electronPackageJSON = await readPackageJSON(path.resolve(dir, 'node_modules', electronName));\n    electronVersion = electronPackageJSON.version;\n    packageJSON.devDependencies['electron-prebuilt-compile'] = electronVersion;\n  }\n\n  await writeChanges();\n\n  if (electronName) {\n    await asyncOra('Pruning deleted modules', async () => {\n      d('attempting to prune node_modules in:', dir);\n      await yarnOrNpmSpawn(hasYarn() ? [] : ['prune'], {\n        cwd: dir,\n        stdio: 'ignore',\n      });\n    });\n  }\n\n  await asyncOra('Installing dependencies', async () => {\n    d('deleting old dependencies forcefully');\n    await fs.remove(path.resolve(dir, 'node_modules/.bin/electron'));\n    await fs.remove(path.resolve(dir, 'node_modules/.bin/electron.cmd'));\n\n    if (electronName) {\n      await fs.remove(path.resolve(dir, 'node_modules', electronName));\n    }\n\n    d('installing dependencies');\n    await installDepList(dir, deps);\n\n    d('installing devDependencies');\n    await installDepList(dir, devDeps, true);\n\n    d('installing exactDevDependencies');\n    await installDepList(dir, exactDevDeps.map((dep) => {\n      if (dep === 'electron-prebuild-compile') {\n        return `${dep}@${electronVersion || 'latest'}`;\n      }\n\n      return dep;\n    }), true, true);\n  });\n\n  packageJSON = await readPackageJSON(dir);\n\n  packageJSON.config = packageJSON.config || {};\n  const templatePackageJSON = await readPackageJSON(path.resolve(__dirname, '../../tmpl'));\n  packageJSON.config.forge = templatePackageJSON.config.forge;\n\n  await writeChanges();\n\n  await asyncOra('Fixing .gitignore', async () => {\n    if (await fs.pathExists(path.resolve(dir, '.gitignore'))) {\n      const gitignore = await fs.readFile(path.resolve(dir, '.gitignore'));\n      if (!gitignore.includes(outDir)) {\n        await fs.writeFile(path.resolve(dir, '.gitignore'), `${gitignore}\\n${outDir}/`);\n      }\n    }\n  });\n\n  let babelConfig = packageJSON.babel;\n  const babelPath = path.resolve(dir, '.babelrc');\n  if (!babelConfig && await fs.pathExists(babelPath)) {\n    babelConfig = JSON.parse(await fs.readFile(babelPath, 'utf8'));\n  }\n\n  if (babelConfig) {\n    await asyncOra('Porting original babel config', async () => {\n      let compileConfig = {};\n      const compilePath = path.resolve(dir, '.compilerc');\n      if (await fs.pathExists(compilePath)) {\n        compileConfig = JSON.parse(await fs.readFile(compilePath, 'utf8'));\n      }\n\n      await fs.writeFile(compilePath, JSON.stringify(Object.assign(compileConfig, {\n        'application/javascript': babelConfig,\n      }), null, 2));\n    });\n\n    info(interactive, 'NOTE: You might be able to remove your `.compilerc` file completely if you are only using the `es2016` and `react` presets'.yellow);\n  }\n\n  info(interactive, `\n\nWe have ATTEMPTED to convert your app to be in a format that electron-forge understands.\nNothing much will have changed but we added the ${'\"electron-prebuilt-compile\"'.cyan} dependency.  This is \\\nthe dependency you must version bump to get newer versions of Electron.\n\n\nWe also tried to import any build tooling you already had but we can't get everything.  You might need to convert any CLI/gulp/grunt tasks yourself.\n\nAlso please note if you are using \\`preload\\` scripts you need to follow the steps outlined \\\nat https://github.com/electron-userland/electron-forge/wiki/Using-%27preload%27-scripts\n\nThanks for using ${'\"electron-forge\"'.green}!!!`);\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/import.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "d",
    "memberof": "api/import.js",
    "static": true,
    "longname": "api/import.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/import",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "ImportOptions",
    "memberof": "api/import.js",
    "static": true,
    "longname": "api/import.js~ImportOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be imported"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "updateScripts",
        "description": "Whether to update the modules package.json scripts to be electron-forge commands"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "`${dir}/out`",
        "defaultRaw": "`${dir}/out`",
        "name": "outDir",
        "description": "The path to the directory containing generated distributables"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ImportOptions"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "import",
    "memberof": "api/import.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/import.js~import",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/import",
    "importStyle": "import",
    "description": "Attempt to import a given module directory to the Electron Forge standard.\n\n- Replaces the prebuilt electron package with the one that integrates with `electron-compile`\n- Sets up `git` and the correct NPM dependencies\n- Adds a template forge config to `package.json`",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "ImportOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the import method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the import process is complete"
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "api/index.js",
    "content": "import 'colors';\n\nimport _import from './import';\nimport init from './init';\nimport install from './install';\nimport lint from './lint';\nimport make from './make';\nimport _package from './package';\nimport publish from './publish';\nimport start from './start';\n\nimport getForgeConfig from '../util/forge-config';\nimport readPackageJSON from '../util/read-package-json';\n\nmodule.exports = {\n  'import': _import, // eslint-disable-line\n  init,\n  install,\n  lint,\n  make,\n  'package': _package, // eslint-disable-line\n  publish,\n  start,\n  utils: {\n    getForgeConfig,\n    readPackageJSON,\n  },\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "api/init.js",
    "content": "import debug from 'debug';\n\nimport initCustom from '../init/init-custom';\nimport initDirectory from '../init/init-directory';\nimport initGit from '../init/init-git';\nimport initNPM from '../init/init-npm';\nimport initStandardFix from '../init/init-standard-fix';\nimport initStarter from '../init/init-starter-files';\n\nimport asyncOra from '../util/ora-handler';\n\nconst d = debug('electron-forge:init');\n\n/**\n * @typedef {Object} InitOptions\n * @property {string} [dir=process.cwd()] The path to the app to be initialized\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [lintstyle=airbnb] The lintstyle to pass through to the template creator\n * @property {string} [template] The custom template to use. If left empty, the default template is used\n */\n\n/**\n * Initialize a new Electron Forge template project in the given directory.\n *\n * @param {InitOptions} providedOptions - Options for the init method\n * @return {Promise} Will resolve when the initialization process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, lintstyle, template } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    lintstyle: 'airbnb',\n    template: null,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  d(`Initializing in: ${dir}`);\n\n  if (!template) {\n    lintstyle = lintstyle.toLowerCase();\n    if (!['airbnb', 'standard'].includes(lintstyle)) {\n      d(`Unrecognized lintstyle argument: '${lintstyle}' -- defaulting to 'airbnb'`);\n      lintstyle = 'airbnb';\n    }\n  }\n\n  await initDirectory(dir, interactive);\n  await initGit(dir);\n  await initStarter(dir, template ? undefined : lintstyle);\n  await initNPM(dir, template ? undefined : lintstyle);\n  if (!template) {\n    if (lintstyle === 'standard') {\n      await initStandardFix(dir);\n    }\n  } else {\n    await initCustom(dir, template, lintstyle);\n  }\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "d",
    "memberof": "api/init.js",
    "static": true,
    "longname": "api/init.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/init",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "InitOptions",
    "memberof": "api/init.js",
    "static": true,
    "longname": "api/init.js~InitOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be initialized"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "airbnb",
        "defaultRaw": "airbnb",
        "name": "lintstyle",
        "description": "The lintstyle to pass through to the template creator"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "template",
        "description": "The custom template to use. If left empty, the default template is used"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitOptions"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "init",
    "memberof": "api/init.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/init.js~init",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/init",
    "importStyle": "init",
    "description": "Initialize a new Electron Forge template project in the given directory.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "InitOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the init method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the initialization process is complete"
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "api/install.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport fetch from 'node-fetch';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport nugget from 'nugget';\nimport os from 'os';\nimport path from 'path';\nimport pify from 'pify';\nimport semver from 'semver';\n\nimport asyncOra from '../util/ora-handler';\nimport { info } from '../util/messages';\n\nimport darwinDMGInstaller from '../installers/darwin/dmg';\nimport darwinZipInstaller from '../installers/darwin/zip';\nimport linuxDebInstaller from '../installers/linux/deb';\nimport linuxRPMInstaller from '../installers/linux/rpm';\nimport win32ExeInstaller from '../installers/win32/exe';\n\nconst d = debug('electron-forge:install');\n\nconst GITHUB_API = 'https://api.github.com';\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [prerelease=false] Whether to install prerelease versions\n * @property {string} repo The GitHub repository to install from, in the format owner/name\n * @property {function} chooseAsset A function that must return the asset to use/install from a provided array of compatible GitHub assets\n */\n\n/**\n * Install an Electron application from GitHub. If you leave interactive as `false`, you MUST provide a `chooseAsset` function.\n *\n * @param {InstallOptions} providedOptions - Options for the install method\n * @return {Promise} Will resolve when the install process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { interactive, prerelease, repo, chooseAsset } = Object.assign({\n    interactive: false,\n    prerelease: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  let latestRelease;\n  let possibleAssets = [];\n\n  await asyncOra('Searching for Application', async (searchSpinner) => {\n    if (!repo || repo.indexOf('/') === -1) {\n      throw 'Invalid repository name, must be in the format owner/name';\n    }\n\n    d('searching for repo:', repo);\n    let releases;\n    try {\n      releases = await (await fetch(`${GITHUB_API}/repos/${repo}/releases`)).json();\n    } catch (err) {\n      // Ignore error\n    }\n\n    if (!releases || releases.message === 'Not Found' || !Array.isArray(releases)) {\n      throw `Failed to find releases for repository \"${repo}\".  Please check the name and try again.`;\n    }\n\n    releases = releases.filter(release => !release.prerelease || prerelease);\n\n    const sortedReleases = releases.sort((releaseA, releaseB) => {\n      let tagA = releaseA.tag_name;\n      if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);\n      let tagB = releaseB.tag_name;\n      if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);\n      return (semver.gt(tagB, tagA) ? 1 : -1);\n    });\n    latestRelease = sortedReleases[0];\n\n    searchSpinner.text = 'Searching for Releases'; // eslint-disable-line\n\n    const assets = latestRelease.assets;\n    if (!assets || !Array.isArray(assets)) {\n      throw 'Could not find any assets for the latest release';\n    }\n\n    const installTargets = {\n      win32: [/\\.exe$/],\n      darwin: [/OSX.*\\.zip$/, /darwin.*\\.zip$/, /macOS.*\\.zip$/, /mac.*\\.zip$/, /\\.dmg$/],\n      linux: [/\\.rpm$/, /\\.deb$/],\n    };\n\n    possibleAssets = assets.filter((asset) => {\n      const targetSuffixes = installTargets[process.platform];\n      for (const suffix of targetSuffixes) {\n        if (suffix.test(asset.name)) return true;\n      }\n      return false;\n    });\n\n    if (possibleAssets.length === 0) {\n      throw `Failed to find any installable assets for target platform: ${`${process.platform}`.cyan}`;\n    }\n  });\n\n  info(interactive, `Found latest release${prerelease ? ' (including prereleases)' : ''}: ${latestRelease.tag_name.cyan}`);\n\n  let targetAsset = possibleAssets[0];\n  if (possibleAssets.length > 1) {\n    if (chooseAsset) {\n      targetAsset = await Promise.resolve(chooseAsset(possibleAssets));\n    } else if (interactive) {\n      const choices = [];\n      possibleAssets.forEach((asset) => {\n        choices.push({ name: asset.name, value: asset.id });\n      });\n      const { assetID } = await inquirer.createPromptModule()({\n        type: 'list',\n        name: 'assetID',\n        message: 'Multiple potential assets found, please choose one from the list below:'.cyan,\n        choices,\n      });\n\n      targetAsset = possibleAssets.find(asset => asset.id === assetID);\n    } else {\n      throw 'expected a chooseAsset function to be provided but it was not';\n    }\n  }\n\n  const tmpdir = path.resolve(os.tmpdir(), 'forge-install');\n  const pathSafeRepo = repo.replace(/[/\\\\]/g, '-');\n  const filename = `${pathSafeRepo}-${latestRelease.tag_name}-${targetAsset.name}`;\n\n  const fullFilePath = path.resolve(tmpdir, filename);\n  if (!await fs.pathExists(fullFilePath) || (await fs.stat(fullFilePath)).size !== targetAsset.size) {\n    await fs.mkdirs(tmpdir);\n\n    const nuggetOpts = {\n      target: filename,\n      dir: tmpdir,\n      resume: true,\n      strictSSL: true,\n    };\n    await pify(nugget)(targetAsset.browser_download_url, nuggetOpts);\n  }\n\n  await asyncOra('Installing Application', async (installSpinner) => {\n    const installActions = {\n      win32: {\n        '.exe': win32ExeInstaller,\n      },\n      darwin: {\n        '.zip': darwinZipInstaller,\n        '.dmg': darwinDMGInstaller,\n      },\n      linux: {\n        '.deb': linuxDebInstaller,\n        '.rpm': linuxRPMInstaller,\n      },\n    };\n\n    const suffixFnIdent = Object.keys(installActions[process.platform]).find(suffix => targetAsset.name.endsWith(suffix));\n    await installActions[process.platform][suffixFnIdent](fullFilePath, installSpinner);\n  });\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/install.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "d",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "GITHUB_API",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~GITHUB_API",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "typedef",
    "name": "InstallOptions",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~InstallOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "prerelease",
        "description": "Whether to install prerelease versions"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "repo",
        "description": "The GitHub repository to install from, in the format owner/name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "chooseAsset",
        "description": "A function that must return the asset to use/install from a provided array of compatible GitHub assets"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InstallOptions"
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "install",
    "memberof": "api/install.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/install.js~install",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": "install",
    "description": "Install an Electron application from GitHub. If you leave interactive as `false`, you MUST provide a `chooseAsset` function.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "InstallOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the install method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the install process is complete"
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "api/lint.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport { yarnOrNpmSpawn } from '../util/yarn-or-npm';\n\nimport asyncOra from '../util/ora-handler';\nimport resolveDir from '../util/resolve-dir';\n\nconst d = debug('electron-forge:lint');\n\n/**\n * @typedef {Object} LintOptions\n * @property {string} [dir=process.cwd()] The path to the module to import\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n */\n\n/**\n * Lint a local Electron application.\n *\n * The promise will be rejected with the stdout+stderr of the linting process if linting fails or\n * will be resolved if it succeeds.\n *\n * @param {LintOptions} providedOptions - Options for the Lint method\n * @return {Promise<null, string>} Will resolve when the lint process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  let success = true;\n  let result = null;\n\n  await asyncOra('Linting Application', async (lintSpinner) => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      throw 'Failed to locate lintable Electron application';\n    }\n\n    d('executing \"run lint -- --color\" in dir:', dir);\n    try {\n      await yarnOrNpmSpawn(['run', 'lint', '--', '--color'], {\n        stdio: process.platform === 'win32' ? 'inherit' : 'pipe',\n        cwd: dir,\n      });\n    } catch (err) {\n      lintSpinner.fail();\n      success = false;\n      result = err;\n    }\n  });\n\n  if (!success) {\n    throw result;\n  }\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/lint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "d",
    "memberof": "api/lint.js",
    "static": true,
    "longname": "api/lint.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/lint",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "LintOptions",
    "memberof": "api/lint.js",
    "static": true,
    "longname": "api/lint.js~LintOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the module to import"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LintOptions"
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "lint",
    "memberof": "api/lint.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/lint.js~lint",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/lint",
    "importStyle": "lint",
    "description": "Lint a local Electron application.\n\nThe promise will be rejected with the stdout+stderr of the linting process if linting fails or\nwill be resolved if it succeeds.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "LintOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Lint method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null, string>"
      ],
      "spread": false,
      "description": "Will resolve when the lint process is complete"
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "api/make.js",
    "content": "import 'colors';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport asyncOra from '../util/ora-handler';\nimport electronHostArch from '../util/electron-host-arch';\nimport getForgeConfig from '../util/forge-config';\nimport runHook from '../util/hook';\nimport { info, warn } from '../util/messages';\nimport readPackageJSON from '../util/read-package-json';\nimport { requireSearchRaw } from '../util/require-search';\nimport resolveDir from '../util/resolve-dir';\n\nimport packager from './package';\n\n/**\n * @typedef {Object} MakeOptions\n * @property {string} [dir=process.cwd()] The path to the app from which distributables are generated\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [skipPackage=false] Whether to skip the pre-make packaging step\n * @property {Array<string>} [overrideTargets] An array of make targets to override your forge config\n * @property {string} [arch=host architecture] The target architecture\n * @property {string} [platform=process.platform] The target platform.\n * @property {string} [outDir=`${dir}/out`] The path to the directory containing generated distributables\n */\n\n/**\n * @typedef {Object} MakeResult\n * @property {Array<string>} artifacts An array of paths to artifacts generated for this make run\n * @property {Object} packageJSON The state of the package.json file when the make happened\n * @property {string} platform The platform this make run was for\n * @property {string} arch The arch this make run was for\n */\n\n/**\n * Make distributables for an Electron application.\n *\n * @param {MakeOptions} providedOptions - Options for the make method\n * @return {Promise<Array<MakeResult>>} Will resolve when the make process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, skipPackage, overrideTargets, arch, platform } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    skipPackage: false,\n    arch: electronHostArch(),\n    platform: process.platform,\n  }, providedOptions);\n\n  const outDir = providedOptions.outDir || path.resolve(dir, 'out');\n  asyncOra.interactive = interactive;\n\n  let forgeConfig;\n  await asyncOra('Resolving Forge Config', async () => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      throw 'Failed to locate makeable Electron application';\n    }\n\n    forgeConfig = await getForgeConfig(dir);\n  });\n\n  if (!['darwin', 'win32', 'linux'].includes(platform)) {\n    throw new Error(`'${platform}' is an invalid platform. Choices are 'darwin', 'win32' or 'linux'`);\n  }\n\n  const makers = {};\n  const targets = overrideTargets || forgeConfig.make_targets[platform];\n\n  for (const target of targets) {\n    const maker = requireSearchRaw(__dirname, [\n      `../makers/${platform}/${target}.js`,\n      `../makers/generic/${target}.js`,\n      `electron-forge-maker-${target}`,\n      target,\n      path.resolve(dir, target),\n      path.resolve(dir, 'node_modules', target),\n    ]);\n\n    if (!maker) {\n      throw new Error([\n        'Could not find a build target with the name: ',\n        `${target} for the platform: ${platform}`,\n      ].join(''));\n    }\n\n    if (!maker.isSupportedOnCurrentPlatform) {\n      throw new Error([\n        `Maker for target ${target} is incompatible with this version of `,\n        'electron-forge, please upgrade or contact the maintainer ',\n        '(needs to implement \\'isSupportedOnCurrentPlatform)\\')',\n      ].join(''));\n    }\n\n    if (!await maker.isSupportedOnCurrentPlatform()) {\n      throw new Error([\n        `Cannot build for ${platform} target ${target}: the maker declared `,\n        `that it cannot run on ${process.platform}`,\n      ].join(''));\n    }\n\n    makers[target] = maker.default || maker;\n  }\n\n  if (!skipPackage) {\n    info(interactive, 'We need to package your application before we can make it'.green);\n    await packager({\n      dir,\n      interactive,\n      arch,\n      platform,\n      outDir,\n    });\n  } else {\n    warn(interactive, 'WARNING: Skipping the packaging step, this could result in an out of date build'.red);\n  }\n\n  const declaredArch = arch;\n\n  info(interactive, 'Making for the following targets:', `${targets.join(', ')}`.cyan);\n\n  let targetArchs = declaredArch.split(',');\n  if (declaredArch === 'all') {\n    switch (platform) {\n      case 'darwin':\n        targetArchs = ['x64'];\n        break;\n      case 'linux':\n        targetArchs = ['ia32', 'x64', 'armv7l'];\n        break;\n      case 'win32':\n      default:\n        targetArchs = ['ia32', 'x64'];\n        break;\n    }\n  }\n\n  const packageJSON = await readPackageJSON(dir);\n  const appName = forgeConfig.electronPackagerConfig.name || packageJSON.productName || packageJSON.name;\n  let outputs = [];\n\n  await runHook(forgeConfig, 'preMake');\n\n  for (const targetArch of targetArchs) {\n    const packageDir = path.resolve(outDir, `${appName}-${platform}-${targetArch}`);\n    if (!(await fs.pathExists(packageDir))) {\n      throw new Error(`Couldn't find packaged app at: ${packageDir}`);\n    }\n\n    for (const target of targets) {\n      const maker = makers[target];\n\n      // eslint-disable-next-line no-loop-func\n      await asyncOra(`Making for target: ${target.cyan} - On platform: ${platform.cyan} - For arch: ${targetArch.cyan}`, async () => {\n        try {\n          const artifacts = await maker({\n            dir: packageDir,\n            appName,\n            targetPlatform: platform,\n            targetArch,\n            forgeConfig,\n            packageJSON,\n          });\n\n          outputs.push({\n            artifacts,\n            packageJSON,\n            platform,\n            arch: targetArch,\n          });\n        } catch (err) {\n          if (err) {\n            throw {\n              message: `An error occured while making for target: ${target}`,\n              stack: `${err.message}\\n${err.stack}`,\n            };\n          } else {\n            throw new Error(`An unknown error occured while making for target: ${target}`);\n          }\n        }\n      });\n    }\n  }\n\n  const result = await runHook(forgeConfig, 'postMake', outputs);\n  // If the postMake hooks modifies the locations / names of the outputs it must return\n  // the new locations so that the publish step knows where to look\n  if (Array.isArray(result)) {\n    outputs = result;\n  }\n\n  return outputs;\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/make.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "typedef",
    "name": "MakeOptions",
    "memberof": "api/make.js",
    "static": true,
    "longname": "api/make.js~MakeOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app from which distributables are generated"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "skipPackage",
        "description": "Whether to skip the pre-make packaging step"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "overrideTargets",
        "description": "An array of make targets to override your forge config"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "host architecture",
        "defaultRaw": "host architecture",
        "name": "arch",
        "description": "The target architecture"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.platform",
        "defaultRaw": "process.platform",
        "name": "platform",
        "description": "The target platform."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "`${dir}/out`",
        "defaultRaw": "`${dir}/out`",
        "name": "outDir",
        "description": "The path to the directory containing generated distributables"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MakeOptions"
    }
  },
  {
    "__docId__": 68,
    "kind": "typedef",
    "name": "MakeResult",
    "memberof": "api/make.js",
    "static": true,
    "longname": "api/make.js~MakeResult",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "artifacts",
        "description": "An array of paths to artifacts generated for this make run"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "packageJSON",
        "description": "The state of the package.json file when the make happened"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "platform",
        "description": "The platform this make run was for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arch",
        "description": "The arch this make run was for"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MakeResult"
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "make",
    "memberof": "api/make.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/make.js~make",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/make",
    "importStyle": "make",
    "description": "Make distributables for an Electron application.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "MakeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the make method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<MakeResult>>"
      ],
      "spread": false,
      "description": "Will resolve when the make process is complete"
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "api/package.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport fs from 'fs-extra';\nimport glob from 'glob';\nimport path from 'path';\nimport pify from 'pify';\nimport packager from 'electron-packager';\n\nimport electronHostArch from '../util/electron-host-arch';\nimport getForgeConfig from '../util/forge-config';\nimport runHook from '../util/hook';\nimport realOra, { fakeOra } from '../util/ora';\nimport packagerCompileHook from '../util/compile-hook';\nimport readPackageJSON from '../util/read-package-json';\nimport rebuildHook from '../util/rebuild';\nimport requireSearch from '../util/require-search';\nimport resolveDir from '../util/resolve-dir';\n\nconst d = debug('electron-forge:packager');\n\n/**\n * @typedef {Object} PackageOptions\n * @property {string} [dir=process.cwd()] The path to the app to package\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [arch=process.arch] The target arch\n * @property {string} [platform=process.platform] The target platform.\n * @property {string} [outDir=`${dir}/out`] The path to the output directory for packaged apps\n */\n\n/**\n * Package an Electron application into an platform dependent format.\n *\n * @param {PackageOptions} providedOptions - Options for the Package method\n * @return {Promise} Will resolve when the package process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, arch, platform } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    arch: electronHostArch(),\n    platform: process.platform,\n  }, providedOptions);\n\n  const ora = interactive ? realOra : fakeOra;\n\n  const outDir = providedOptions.outDir || path.resolve(dir, 'out');\n  let prepareSpinner = ora(`Preparing to Package Application for arch: ${(arch === 'all' ? 'ia32' : arch).cyan}`).start();\n  let prepareCounter = 0;\n\n  dir = await resolveDir(dir);\n  if (!dir) {\n    throw 'Failed to locate compilable Electron application';\n  }\n\n  const packageJSON = await readPackageJSON(dir);\n\n  if (path.dirname(require.resolve(path.resolve(dir, packageJSON.main))) === dir) {\n    console.error(`Entry point: ${packageJSON.main}`.red);\n    throw 'The entry point to your application (\"packageJSON.main\") must be in a subfolder not in the top level directory';\n  }\n\n  const forgeConfig = await getForgeConfig(dir);\n  let packagerSpinner;\n\n  const packageOpts = Object.assign({\n    asar: false,\n    overwrite: true,\n  }, forgeConfig.electronPackagerConfig, {\n    afterCopy: [async (buildPath, electronVersion, pPlatform, pArch, done) => {\n      if (packagerSpinner) {\n        packagerSpinner.succeed();\n        prepareCounter += 1;\n        prepareSpinner = ora(`Preparing to Package Application for arch: ${(prepareCounter === 2 ? 'armv7l' : 'x64').cyan}`).start();\n      }\n      await fs.remove(path.resolve(buildPath, 'node_modules/electron-compile/test'));\n      const bins = await pify(glob)(path.join(buildPath, '**/.bin/**/*'));\n      for (const bin of bins) {\n        await fs.remove(bin);\n      }\n      done();\n    }, async (...args) => {\n      prepareSpinner.succeed();\n      await packagerCompileHook(dir, ...args);\n    }, async (buildPath, electronVersion, pPlatform, pArch, done) => {\n      await rebuildHook(buildPath, electronVersion, pPlatform, pArch);\n      packagerSpinner = ora('Packaging Application').start();\n      done();\n    }, async (buildPath, electronVersion, pPlatform, pArch, done) => {\n      const copiedPackageJSON = await readPackageJSON(buildPath);\n      if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {\n        delete copiedPackageJSON.config.forge;\n      }\n      await fs.writeFile(path.resolve(buildPath, 'package.json'), JSON.stringify(copiedPackageJSON, null, 2));\n      done();\n    }].concat(forgeConfig.electronPackagerConfig.afterCopy ? forgeConfig.electronPackagerConfig.afterCopy.map(item =>\n      (typeof item === 'string' ? requireSearch(dir, [item]) : item)\n    ) : []),\n    afterExtract: forgeConfig.electronPackagerConfig.afterExtract ? forgeConfig.electronPackagerConfig.afterExtract.map(item =>\n      (typeof item === 'string' ? requireSearch(dir, [item]) : item)\n    ) : [],\n    dir,\n    arch,\n    platform,\n    out: outDir,\n    electronVersion: packageJSON.devDependencies['electron-prebuilt-compile'],\n  });\n  packageOpts.quiet = true;\n  if (typeof packageOpts.asar === 'object' && packageOpts.asar.unpack) {\n    packagerSpinner.fail();\n    throw new Error('electron-compile does not support asar.unpack yet.  Please use asar.unpackDir');\n  }\n\n  await runHook(forgeConfig, 'generateAssets');\n  await runHook(forgeConfig, 'prePackage');\n\n  d('packaging with options', packageOpts);\n\n  await packager(packageOpts);\n\n  await runHook(forgeConfig, 'postPackage');\n\n  packagerSpinner.succeed();\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/package.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "d",
    "memberof": "api/package.js",
    "static": true,
    "longname": "api/package.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/package",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "typedef",
    "name": "PackageOptions",
    "memberof": "api/package.js",
    "static": true,
    "longname": "api/package.js~PackageOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to package"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.arch",
        "defaultRaw": "process.arch",
        "name": "arch",
        "description": "The target arch"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.platform",
        "defaultRaw": "process.platform",
        "name": "platform",
        "description": "The target platform."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "`${dir}/out`",
        "defaultRaw": "`${dir}/out`",
        "name": "outDir",
        "description": "The path to the output directory for packaged apps"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PackageOptions"
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "package",
    "memberof": "api/package.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/package.js~package",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/package",
    "importStyle": "package",
    "description": "Package an Electron application into an platform dependent format.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "PackageOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Package method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the package process is complete"
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "api/publish.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport asyncOra from '../util/ora-handler';\nimport deprecate from '../util/deprecate';\nimport getForgeConfig from '../util/forge-config';\nimport readPackageJSON from '../util/read-package-json';\nimport requireSearch from '../util/require-search';\nimport resolveDir from '../util/resolve-dir';\nimport PublishState from '../util/publish-state';\n\nimport make from './make';\n\nconst d = debug('electron-forge:publish');\n\n/**\n * @typedef {Object} PublishOptions\n * @property {string} [dir=process.cwd()] The path to the app to be published\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [authToken] An authentication token to use when publishing\n * @property {string} [tag=packageJSON.version] The string to tag this release with\n * @property {string} [target=github] The publish target\n * @property {MakeOptions} [makeOptions] Options object to passed through to make()\n * @property {string} [outDir=`${dir}/out`] The path to the directory containing generated distributables\n * @property {boolean} [dryRun=false] Whether or not to generate dry run meta data and not actually publish\n * @property {boolean} [dryRunResume=false] Whether or not to attempt to resume a previously saved dryRun and publish\n * @property {Object} [makeResults=null] Provide results from make so that the publish step doesn't run make itself\n */\n\n/**\n * Publish an Electron application into the given target service.\n *\n * @param {PublishOptions} providedOptions - Options for the Publish method\n * @return {Promise} Will resolve when the publish process is complete\n */\nconst publish = async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, authToken, tag, target, makeOptions, dryRun, dryRunResume, makeResults } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    tag: null,\n    makeOptions: {},\n    target: null,\n    dryRun: false,\n    dryRunResume: false,\n    makeResults: null,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n  // FIXME(MarshallOfSound): Change the method param to publishTargets in the next major bump\n  let publishTargets = target;\n\n  const outDir = providedOptions.outDir || path.resolve(dir, 'out');\n  const dryRunDir = path.resolve(outDir, 'publish-dry-run');\n\n  if (dryRun && dryRunResume) {\n    throw 'Can\\'t dry run and resume a dry run at the same time';\n  }\n  if (dryRunResume && makeResults) {\n    throw 'Can\\'t resume a dry run and use the provided makeResults at the same time';\n  }\n\n  let packageJSON = await readPackageJSON(dir);\n\n  const forgeConfig = await getForgeConfig(dir);\n\n  if (dryRunResume) {\n    d('attempting to resume from dry run');\n    const publishes = await PublishState.loadFromDirectory(dryRunDir);\n    for (const publishStates of publishes) {\n      d('publishing for given state set');\n      await publish({\n        dir,\n        interactive,\n        authToken,\n        tag,\n        target,\n        makeOptions,\n        dryRun: false,\n        dryRunResume: false,\n        makeResults: publishStates.map(({ state }) => state),\n      });\n    }\n    return;\n  } else if (!makeResults) {\n    d('triggering make');\n    makeResults = await make(Object.assign({\n      dir,\n      interactive,\n    }, makeOptions));\n  } else {\n    // Restore values from dry run\n    d('restoring publish settings from dry run');\n\n    for (const makeResult of makeResults) {\n      packageJSON = makeResult.packageJSON;\n      makeOptions.platform = makeResult.platform;\n      makeOptions.arch = makeResult.arch;\n\n      for (const makePath of makeResult.artifacts) {\n        if (!await fs.exists(makePath)) {\n          throw `Attempted to resume a dry run but an artifact (${makePath}) could not be found`;\n        }\n      }\n    }\n  }\n\n  if (dryRun) {\n    d('saving results of make in dry run state', makeResults);\n    await fs.remove(dryRunDir);\n    await PublishState.saveToDirectory(dryRunDir, makeResults);\n    return;\n  }\n\n  dir = await resolveDir(dir);\n  if (!dir) {\n    throw 'Failed to locate publishable Electron application';\n  }\n\n  const artifacts = makeResults.reduce((accum, makeResult) => {\n    accum.push(...makeResult.artifacts);\n    return accum;\n  }, []);\n\n  if (publishTargets === null) {\n    publishTargets = forgeConfig.publish_targets[makeOptions.platform || process.platform];\n  } else if (typeof publishTargets === 'string') {\n    // FIXME(MarshallOfSound): Remove this fallback string typeof check in the next major bump\n    deprecate('publish target as a string').replaceWith('an array of publish targets');\n    publishTargets = [publishTargets];\n  }\n\n  for (const publishTarget of publishTargets) {\n    let publisher;\n    await asyncOra(`Resolving publish target: ${`${publishTarget}`.cyan}`, async () => { // eslint-disable-line no-loop-func\n      publisher = requireSearch(__dirname, [\n        `../publishers/${publishTarget}.js`,\n        `electron-forge-publisher-${publishTarget}`,\n        publishTarget,\n        path.resolve(dir, publishTarget),\n        path.resolve(dir, 'node_modules', publishTarget),\n      ]);\n      if (!publisher) {\n        throw `Could not find a publish target with the name: ${publishTarget}`;\n      }\n    });\n\n    await publisher(artifacts, packageJSON, forgeConfig, authToken, tag, makeOptions.platform || process.platform, makeOptions.arch || process.arch);\n  }\n};\n\nexport default publish;\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/publish.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "d",
    "memberof": "api/publish.js",
    "static": true,
    "longname": "api/publish.js~d",
    "access": "public",
    "export": false,
    "importPath": "electron-forge/dist/api/publish",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "typedef",
    "name": "PublishOptions",
    "memberof": "api/publish.js",
    "static": true,
    "longname": "api/publish.js~PublishOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be published"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "authToken",
        "description": "An authentication token to use when publishing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "packageJSON.version",
        "defaultRaw": "packageJSON.version",
        "name": "tag",
        "description": "The string to tag this release with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "github",
        "defaultRaw": "github",
        "name": "target",
        "description": "The publish target"
      },
      {
        "nullable": null,
        "types": [
          "MakeOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "Options object to passed through to make()"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "`${dir}/out`",
        "defaultRaw": "`${dir}/out`",
        "name": "outDir",
        "description": "The path to the directory containing generated distributables"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "dryRun",
        "description": "Whether or not to generate dry run meta data and not actually publish"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "dryRunResume",
        "description": "Whether or not to attempt to resume a previously saved dryRun and publish"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "makeResults",
        "description": "Provide results from make so that the publish step doesn't run make itself"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PublishOptions"
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "publish",
    "memberof": "api/publish.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/publish.js~publish",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/publish",
    "importStyle": "publish",
    "description": "Publish an Electron application into the given target service.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublishOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Publish method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the publish process is complete"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "api/start.js",
    "content": "import 'colors';\nimport { spawn } from 'child_process';\nimport path from 'path';\n\nimport asyncOra from '../util/ora-handler';\nimport readPackageJSON from '../util/read-package-json';\nimport rebuild from '../util/rebuild';\nimport resolveDir from '../util/resolve-dir';\nimport getForgeConfig from '../util/forge-config';\nimport runHook from '../util/hook';\n\n/**\n * @typedef {Object} StartOptions\n * @property {string} [dir=process.cwd()] The path to the electron forge project to run\n * @property {string} [appPath='.'] The path (relative to dir) to the electron app to run relative to the project directory\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [enableLogging=false] Enables advanced internal Electron debug calls\n * @property {Array<string>} [args] Arguments to pass through to the launched Electron application\n */\n\n/**\n * Start an Electron application.\n *\n * @param {StartOptions} providedOptions - Options for the Publish method\n * @return {Promise} Will resolve when the application is launched\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, enableLogging, appPath, args, runAsNode, inspect } = Object.assign({\n    dir: process.cwd(),\n    appPath: '.',\n    interactive: false,\n    enableLogging: false,\n    args: [],\n    runAsNode: false,\n    inspect: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  await asyncOra('Locating Application', async () => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      throw 'Failed to locate startable Electron application';\n    }\n  });\n\n  const packageJSON = await readPackageJSON(dir);\n\n  await rebuild(dir, packageJSON.devDependencies['electron-prebuilt-compile'], process.platform, process.arch);\n\n  const spawnOpts = {\n    cwd: dir,\n    stdio: 'inherit',\n    env: Object.assign({}, process.env, enableLogging ? {\n      ELECTRON_ENABLE_LOGGING: true,\n      ELECTRON_ENABLE_STACK_DUMPING: true,\n    } : {}),\n  };\n\n  if (runAsNode) {\n    spawnOpts.env.ELECTRON_RUN_AS_NODE = true;\n  } else {\n    delete spawnOpts.env.ELECTRON_RUN_AS_NODE;\n  }\n\n  if (inspect) {\n    args = ['--inspect'].concat(args);\n  }\n\n  let spawned;\n\n  const forgeConfig = await getForgeConfig(dir);\n  await runHook(forgeConfig, 'generateAssets');\n\n  await asyncOra('Launching Application', async () => {\n    spawned = spawn(process.execPath, [path.resolve(dir, 'node_modules/electron-prebuilt-compile/lib/cli'), appPath].concat(args), spawnOpts);\n  });\n\n  return spawned;\n};\n",
    "static": true,
    "longname": "/Users/sattard/projects/electron-forge/src/api/start.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "typedef",
    "name": "StartOptions",
    "memberof": "api/start.js",
    "static": true,
    "longname": "api/start.js~StartOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the electron forge project to run"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'.'",
        "defaultRaw": "'.'",
        "name": "appPath",
        "description": "The path (relative to dir) to the electron app to run relative to the project directory"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "enableLogging",
        "description": "Enables advanced internal Electron debug calls"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": "Arguments to pass through to the launched Electron application"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StartOptions"
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "start",
    "memberof": "api/start.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/start.js~start",
    "access": "public",
    "export": true,
    "importPath": "electron-forge/dist/api/start",
    "importStyle": "start",
    "description": "Start an Electron application.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "StartOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Publish method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the application is launched"
    }
  },
  {
    "kind": "index",
    "content": "Electron Forge\n--------------\n[![Linux/macOS Build Status](https://travis-ci.org/electron-userland/electron-forge.svg?branch=master)](https://travis-ci.org/electron-userland/electron-forge)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/79ae80nek1eucyy3?svg=true)](https://ci.appveyor.com/project/electron-userland/electron-forge)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![npm version](https://badge.fury.io/js/electron-forge.svg)](https://www.npmjs.com/package/electron-forge)\n[![npm](https://img.shields.io/npm/dt/electron-forge.svg?maxAge=2592000)](https://www.npmjs.com/package/electron-forge)\n[![license](https://img.shields.io/github/license/electron-userland/electron-forge.svg)](https://github.com/electron-userland/electron-forge/blob/master/LICENSE)\n![status](https://img.shields.io/badge/Status-%20Ready%20for%20Awesome-red.svg)\n\nA complete tool for building modern Electron applications.\n\nElectron Forge unifies the existing (and well maintained) build tools for\nElectron development into a simple, easy to use package so that anyone can\njump right in to Electron development.\n\n# Getting Started\n\n**Note**: Electron Forge requires Node 6 or above, plus git installed.\n\n```bash\nnpm install -g electron-forge\nelectron-forge init my-new-app\ncd my-new-app\nnpm start\n```\n\nAlternatively, if you have a more recent version of `npm` or `yarn`, you can use\n[`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b),\nor\n[`yarn create`](https://yarnpkg.com/blog/2017/05/12/introducing-yarn/).\n\n```bash\nnpx electron-forge init my-new-app\n# or\nyarn create electron-app my-new-app\n\n# then\ncd my-new-app\nnpm start\n```\n\n# Project Goals\n\n1. Starting with Electron should be as simple as a single command.\n2. Developers shouldn't have to worry about `babel`, `browserify`, `webpack`,\n   native module rebuilding, etc.  Everything should \"just work\" for them out\n   of the box.\n3. Everything from creating the project to packaging the project for release\n   should be handled by one dependency in a standard way while still offering\n   users maximum choice and freedom.\n\nWith these goals in mind, under the hood this project uses, among others:\n\n* [`electron-compile`](https://github.com/electron/electron-compile): a tool\n  that lets you use modern and futuristic languages inside Electron without\n  worrying about transpiling or build tooling.\n* [`electron-rebuild`](https://github.com/electron/electron-rebuild):\n  Automatically recompiles native Node.js modules against the correct\n  Electron version.\n* [Electron Packager](https://github.com/electron-userland/electron-packager):\n  Customizes and bundles your Electron app to get it ready for distribution.\n\n# Usage\n\n## Starting a new Project\n\n```bash\nnpm install -g electron-forge\nelectron-forge init my-new-project\n```\n\nThis command will generate a brand new project folder and install all your Node\nmodule dependencies, so you will be all set to go.  By default we will also\ninstall the `airbnb` linting modules.  If you want to follow the `standard`\nlinting rules instead, use the `--lintstyle=standard` argument.\n\nYou can also start a project with your\n[favorite framework](https://electronforge.io/templates) with the `--template`\nargument.  E.g. `--template=react`.\n\n## Importing an existing Project\n\n```bash\nelectron-forge import existing-project-directory\n```\n\nGiven an existing Electron project, this command will attempt to interactively\nnavigate through the process of importing it to the Electron Forge format, so\nthe commands listed below can be used. This includes being prompted to remove\nexisting Electron build tools in favor of Electron Forge equivalents.\n\n## Launching your Project\n\n```bash\nelectron-forge start\n```\n\nAny arguments after \"start\" will be passed through to your application when\nit's launched.\n\n## Packaging your Project\n\n```bash\nelectron-forge package\n```\n\nYes, it really is that simple.  If you want to specify platform / arch, use the\n`--platform=<platform>` and `--arch=<arch>` arguments.\n\n## Generating a distributable for your Project\n\n```bash\nelectron-forge make\n```\n\nThis will generate platform specific distributables (installers, distribution\npackages, etc.) for you. Note that you can only generate distributables for your\ncurrent platform.\n\n## Linting your Project\n\n```bash\nelectron-forge lint\n```\n\n## Publishing your Project\n\n```bash\nelectron-forge publish\n```\n\nThis will `make` your project and publish any generated artifacts.  By default it will publish to GitHub but you can change the publish target with `--target=YourTarget`.\n\n# Config\n\nOnce you have generated a project, your `package.json` file will have some\ndefault `forge` configuration.  Below is the reference structure for this\nconfig object:\n\n```javascript\n{\n  \"make_targets\": {\n    \"win32\": [\"squirrel\"], // An array of win32 make targets\n    \"darwin\": [\"zip\", \"dmg\"], // An array of darwin make targets\n    \"linux\": [\"deb\", \"rpm\", \"flatpak\"] // An array of linux make targets\n  },\n  \"electronPackagerConfig\": {},\n  \"electronWinstallerConfig\": {},\n  \"electronInstallerDMG\": {},\n  \"electronInstallerFlatpak\": {},\n  \"electronInstallerDebian\": {},\n  \"electronInstallerRedhat\": {}\n}\n```\n\n## Possible `make` targets\n\n| Target Name | Available Platforms | Description | Configurable Options | Default? | Requirements |\n|-------------|---------------------|-------------|----------------------|----------|--------------|\n| `zip`       | All                 | Zips your packaged application | None | Yes | `zip` on Darwin/Linux |\n| `squirrel`  | Windows             | Generates an installer and `.nupkg` files for Squirrel.Windows | [`electronWinstallerConfig`](https://github.com/electron/windows-installer#usage) | Yes |  |\n| `appx`      | Windows             | Generates a Windows Store package | [`windowsStoreConfig`](https://github.com/felixrieseberg/electron-windows-store#programmatic-usage) | No |  |\n| `dmg`       | Darwin              | Generates a DMG file | [`electronInstallerDMG`](https://github.com/mongodb-js/electron-installer-dmg#api) | No |  |\n| `deb`       | Linux               | Generates a Debian package | [`electronInstallerDebian`](https://github.com/unindented/electron-installer-debian#options) | Yes | [`fakeroot` and `dpkg`](https://github.com/unindented/electron-installer-debian#requirements) |\n| `rpm`       | Linux               | Generates an RPM package | [`electronInstallerRedhat`](https://github.com/unindented/electron-installer-redhat#options) | Yes | [`rpm`](https://github.com/unindented/electron-installer-redhatn#requirements) |\n| `flatpak`   | Linux               | Generates a [Flatpak](http://flatpak.org/) file | [`electronInstallerFlatpak`](https://github.com/endlessm/electron-installer-flatpak#options) | No | [`flatpak-builder`](https://github.com/endlessm/electron-installer-flatpak#requirements) |\n\n## Configuring `package`\n\nYou can set `electronPackagerConfig` with any of the options from\n[Electron Packager](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md), except:\n\n* `arch`\n* `asar.unpack` (use `asar.unpackDir` instead)\n* `dir`\n* `electronVersion` (uses the exact version specified for `electron-prebuilt-compile` in your `devDependencies`)\n* `out`\n* `platform`\n* `quiet`\n\n**NOTE:** You can also set your `forge` config property of your package.json to point to a JS file that exports the config object:\n\n```js\n{\n  ...\n  \"config\": {\n    \"forge\": \"./forge.config.js\"\n  }\n  ...\n}\n```\n\n**NOTE:** If you use the JSON object then the `afterCopy` and `afterExtract` options are mapped to `require`\ncalls internally, so provide a path to a file that exports your hooks and they will still run.  If you use\nthe JS file method mentioned above then you can use functions normally.\n\n## Possible `publish` targets\n\n| Target Name | Description | Required Config |\n|-------------|-------------|-----------------|\n| GitHub Releases - `github` | Makes a new release for the current version (if required) and uploads the make artifacts as release assets | `process.env.GITHUB_TOKEN` - A personal access token with access to your releases <br />`forge.github_repository.owner` - The owner of the GitHub repository<br />`forge.github_repository.name` - The name of the GitHub repository <br />`forge.github_repository.draft` - Create the release as a draft, defaults to `true` <br />`forge.github_repository.prerelease` - Identify the release as a prerelease, defaults to `false` |\n| Amazon S3 - `s3` | Uploads your artifacts to the given S3 bucket | `process.env.ELECTRON_FORGE_S3_SECRET_ACCESS_KEY` - Your secret access token for your AWS account _(falls back to the standard `AWS_SECRET_ACCESS_KEY` environment variable)_<br />`forge.s3.accessKeyId` - Your access key for your AWS account _(falls back to the standard `AWS_ACCESS_KEY_ID` environment variable)_<br />`forge.s3.bucket` - The name of the S3 bucket to upload to<br />`forge.s3.folder` - The folder path to upload to inside your bucket, defaults to your application version<br />`forge.s3.public` - Whether to make the S3 upload public, defaults to `false` |\n| [Electron Release Server](https://github.com/ArekSredzki/electron-release-server) - `electron-release-server` |  Makes a new release for the current version and uploads the artifacts to the correct platform/arch in the given version.  If the version already exists no upload will be performed.  The channel is determined from the current version. | `forge.electronReleaseServer.baseUrl` - The base URL of your release server, no trailing slash<br />`forge.electronReleaseServer.username` - The username for the admin panel on your server<br />`forge.electronReleaseServer.password` - The password for the admin panel on your server |\n\nFor example:\n\n```javascript\n// github\n{\n  // Assume the GitHub repository is at https://github.com/username/repo\n  \"github_repository\": {\n    \"owner\": \"username\",\n    \"name\": \"repo\"\n  }\n}\n\n// s3\n{\n  \"s3\": {\n    \"accessKeyId\": \"<AWS_ACCESS_KEY>\",\n    \"bucket\": \"my_bucket_name\",\n    \"public\": true\n  }\n}\n\n// Electron Release Server\n{\n  \"electronReleaseServer\": {\n    \"baseUrl\": \"https://update.mysite.com\",\n    \"username\": \"admin\",\n    \"password\": \"no_one_will_guess_this\"\n  }\n}\n```\n\n## Custom `make` and `publish` targets\n\nYou can make your own custom targets for the `make` and `publish` targets.  If you publish them as `electron-forge-publisher-{name}` or `electron-forge-maker-{name}` you can then just specify `{name}` as your make / publish target.  The API for each is documented below.\n\n### API for `make` targets\n\nYou must export a Function that returns a Promise.  Your function will be called with the following parameters.\n\n* `appDir` - The directory containing the packaged application\n* `appName` - The productName of the application\n* `targetArch` - The target architecture of the make command\n* `forgeConfig` - An object representing the users forgeConfig\n* `packageJSON` - An object representing the users package.json file\n\nYour promise must resolve with an array of the artifacts you generated.\n\n### API for `publish` targets\n\nYou must export a Function that returns a Promise.  Your function will be called with the following parameters.\n\n* artifactPaths - An array of absolute paths to artifacts to publish\n* packageJSON - An object representing the users package.json file\n* forgeConfig - An object representing the users forgeConfig\n* authToken - The value of `--auth-token`\n* tag - The value of `--tag`\n* platform - The platform you are publishing for\n* arch - The arch you are publishing for\n\nYou should use `ora` to indicate your publish progress.\n\n## Debugging your application through VS Code\n\nDebugging your Electron main process through VS Code is ridiculously\neasy with Forge.  Simply add this as a launch config in VSCode and you're\ngood to go.\n\n```js\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Electron Main\",\n  \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/electron-forge-vscode-nix\",\n  \"windows\": {\n    \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/electron-forge-vscode-win.cmd\"\n  },\n  // runtimeArgs will be passed directly to your Electron application\n  \"runtimeArgs\": [\n    \"foo\",\n    \"bar\"\n  ],\n  \"cwd\": \"${workspaceRoot}\"\n}\n```\n",
    "longname": "/Users/sattard/projects/electron-forge/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"electron-forge\",\n  \"version\": \"3.2.0\",\n  \"description\": \"A complete tool for building modern Electron applications\",\n  \"repository\": \"https://github.com/electron-userland/electron-forge\",\n  \"main\": \"dist/api/index.js\",\n  \"bin\": {\n    \"electron-forge\": \"dist/electron-forge.js\",\n    \"forge\": \"dist/electron-forge.js\",\n    \"electron-forge-vscode-nix\": \"script/vscode.sh\",\n    \"electron-forge-vscode-win\": \"script/vscode.cmd\"\n  },\n  \"scripts\": {\n    \"build\": \"gulp build\",\n    \"precommit\": \"npm run lint\",\n    \"commit\": \"git-cz\",\n    \"docs\": \"esdoc\",\n    \"install\": \"node tabtab-install.js\",\n    \"lint\": \"eslint src test gulpfile.babel.js\",\n    \"prepublish\": \"gulp build\",\n    \"pretest\": \"gulp build\",\n    \"test\": \"npm run lint && npm run test-all\",\n    \"test-coverage\": \"npm run lint && npm run test-all-coverage\",\n    \"test-all\": \"mocha test/**/*_spec*.js test/**/**/*_spec*.js --compilers js:babel-register --timeout=300000\",\n    \"test-fast\": \"mocha test/**/*_spec.js test/**/**/*_spec.js --compilers js:babel-register --timeout=10000\",\n    \"test-all-coverage\": \"cross-env NODE_ENV=test nyc npm run test-all\",\n    \"test-fast-coverage\": \"cross-env NODE_ENV=test nyc npm run test-fast\",\n    \"release:patch\": \"changelog -p && node ci/fix-changelog.js && git add CHANGELOG.md && git commit -m \\\"updated CHANGELOG.md\\\" && npm version patch && git push origin && git push origin --tags\",\n    \"release:minor\": \"changelog -m && node ci/fix-changelog.js && git add CHANGELOG.md && git commit -m \\\"updated CHANGELOG.md\\\" && npm version minor && git push origin && git push origin --tags\",\n    \"release:major\": \"changelog -M && node ci/fix-changelog.js && git add CHANGELOG.md && git commit -m \\\"updated CHANGELOG.md\\\" && npm version major && git push origin && git push origin --tags\",\n    \"watch\": \"gulp watch\",\n    \"watch-link\": \"nodemon --watch src --exec \\\"npm link\\\"\"\n  },\n  \"author\": \"Samuel Attard\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"asar\": \"^0.13.0\",\n    \"babel-eslint\": \"^7.0.0\",\n    \"babel-plugin-istanbul\": \"^4.0.0\",\n    \"babel-plugin-syntax-async-functions\": \"^6.13.0\",\n    \"babel-plugin-transform-async-to-module-method\": \"^6.16.0\",\n    \"babel-plugin-transform-runtime\": \"^6.15.0\",\n    \"babel-preset-es2015\": \"^6.16.0\",\n    \"chai\": \"^4.0.0\",\n    \"chai-as-promised\": \"^7.0.0\",\n    \"commitizen\": \"^2.8.6\",\n    \"coveralls\": \"^2.11.15\",\n    \"cross-env\": \"^5.0.0\",\n    \"cz-customizable\": \"5.0.0\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-importpath-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.7.1\",\n    \"eslint-config-airbnb-base\": \"^8.0.0\",\n    \"eslint-plugin-import\": \"^1.16.0\",\n    \"eslint-plugin-mocha\": \"^4.8.0\",\n    \"fetch-mock\": \"^5.1.0\",\n    \"generate-changelog\": \"^1.0.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-babel\": \"^6.1.2\",\n    \"mocha\": \"^3.2.0\",\n    \"nodemon\": \"^1.11.0\",\n    \"nyc\": \"^11.0.0\",\n    \"proxyquire\": \"^1.7.10\",\n    \"sinon\": \"^3.0.0\"\n  },\n  \"babel\": {\n    \"sourceMaps\": \"inline\",\n    \"env\": {\n      \"test\": {\n        \"plugins\": [\n          \"istanbul\"\n        ]\n      }\n    },\n    \"presets\": [\n      \"es2015\"\n    ],\n    \"plugins\": [\n      \"transform-runtime\",\n      \"syntax-async-functions\",\n      [\n        \"transform-async-to-module-method\",\n        {\n          \"module\": \"bluebird\",\n          \"method\": \"coroutine\"\n        }\n      ]\n    ]\n  },\n  \"nyc\": {\n    \"reporter\": [\n      \"lcov\",\n      \"text-summary\",\n      \"html\"\n    ],\n    \"sourceMap\": false,\n    \"instrument\": false,\n    \"cache\": true\n  },\n  \"dependencies\": {\n    \"aws-sdk\": \"^2.9.0\",\n    \"babel-register\": \"^6.16.3\",\n    \"bluebird\": \"^3.4.6\",\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"debug\": \"^3.0.0\",\n    \"electron-forge-template-angular2\": \"^1.0.3\",\n    \"electron-forge-template-react\": \"^1.0.2\",\n    \"electron-forge-template-react-typescript\": \"^1.0.3\",\n    \"electron-forge-template-vue\": \"^1.0.2\",\n    \"electron-packager\": \"^9.0.0\",\n    \"electron-rebuild\": \"^1.6.0\",\n    \"form-data\": \"^2.1.4\",\n    \"fs-extra\": \"^4.0.0\",\n    \"github\": \"^9.0.0\",\n    \"glob\": \"^7.1.1\",\n    \"inquirer\": \"^3.0.1\",\n    \"lodash.template\": \"^4.4.0\",\n    \"log-symbols\": \"^2.0.0\",\n    \"node-fetch\": \"^1.6.3\",\n    \"node-gyp\": \"^3.4.0\",\n    \"nugget\": \"^2.0.1\",\n    \"opn\": \"^5.0.0\",\n    \"ora\": \"^1.1.0\",\n    \"pify\": \"^3.0.0\",\n    \"resolve-package\": \"^1.0.1\",\n    \"s3\": \"^4.4.0\",\n    \"semver\": \"^5.3.0\",\n    \"spawn-rx\": \"^2.0.7\",\n    \"sudo-prompt\": \"^7.0.0\",\n    \"tabtab\": \"^2.2.1\",\n    \"username\": \"^3.0.0\",\n    \"yarn-or-npm\": \"^2.0.2\",\n    \"zip-folder\": \"^1.0.0\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-customizable\"\n    },\n    \"cz-customizable\": {\n      \"config\": \"./.cz.js\"\n    }\n  },\n  \"optionalDependencies\": {\n    \"electron-installer-debian\": \"^0.5.0\",\n    \"electron-installer-dmg\": \"^0.2.0\",\n    \"electron-installer-flatpak\": \"^0.6.0\",\n    \"electron-installer-redhat\": \"^0.5.0\",\n    \"electron-windows-store\": \"^0.10.1\",\n    \"electron-winstaller\": \"^2.5.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0\"\n  }\n}\n",
    "longname": "/Users/sattard/projects/electron-forge/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]