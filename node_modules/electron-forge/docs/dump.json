[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "api/import.js",
    "content": "import debug from 'debug';\nimport fs from 'fs-promise';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport { spawn as yarnOrNPMSpawn, hasYarn } from 'yarn-or-npm';\n\nimport initGit from '../init/init-git';\nimport { deps, devDeps } from '../init/init-npm';\n\nimport asyncOra from '../util/ora-handler';\nimport installDepList from '../util/install-dependencies';\nimport readPackageJSON from '../util/read-package-json';\nimport confirmIfInteractive from '../util/confirm-if-interactive';\n\nconst d = debug('electron-forge:import');\n\n/**\n * @typedef {Object} ImportOptions\n * @property {string} [dir=process.cwd()] The path to the app to be imported\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n */\n\n/**\n * Attempt to import a given module directory to the Electron Forge standard.\n *\n * - Replaces the prebuilt electron package with the one that integrates with `electron-compile`\n * - Sets up `git` and the correct NPM dependencies\n * - Adds a template forge config to `package.json`\n *\n * @param {ImportOptions} providedOptions - Options for the import method\n * @return {Promise} Will resolve when the import process is complete\n */\nexport default async (providedOptions = {}) => {\n  const { dir, interactive } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  d(`Attempting to import project in: ${dir}`);\n  if (!await fs.exists(dir) || !await fs.exists(path.resolve(dir, 'package.json'))) {\n    console.error(`We couldn't find a project in: ${dir}`.red);\n    process.exit(1);\n  }\n\n  // eslint-disable-next-line max-len\n  const confirm = await confirmIfInteractive(interactive, `WARNING: We will now attempt to import: \"${dir}\".  This will involve modifying some files, are you sure you want to continue?`);\n\n  if (!confirm) {\n    process.exit(1);\n  }\n\n  await initGit(dir);\n\n  let packageJSON = await readPackageJSON(dir);\n  if (packageJSON.config && packageJSON.config.forge) {\n    console.warn('It looks like this project is already configured for \"electron-forge\"'.green);\n    const shouldContinue = await confirmIfInteractive(interactive, 'Are you sure you want to continue?');\n\n    if (!shouldContinue) {\n      process.exit(0);\n    }\n  }\n\n  // eslint-disable-next-line max-len\n  const shouldChangeMain = await confirmIfInteractive(interactive, 'Do you want us to change the \"main\" attribute of your package.json?  If you are currently using babel and pointing to a \"build\" directory say yes.', false);\n  if (shouldChangeMain) {\n    const { newMain } = await inquirer.createPromptModule()({\n      type: 'input',\n      name: 'newMain',\n      default: packageJSON.main,\n      message: 'Enter the relative path to your uncompiled main file',\n    });\n    packageJSON.main = newMain;\n  }\n\n  packageJSON.dependencies = packageJSON.dependencies || {};\n  packageJSON.devDependencies = packageJSON.devDependencies || {};\n\n  const keys = Object.keys(packageJSON.dependencies).concat(Object.keys(packageJSON.devDependencies));\n  const buildToolPackages = {\n    'electron-builder': 'provides mostly equivalent functionality',\n    'electron-download': 'already uses this module as a transitive dependency',\n    'electron-installer-debian': 'already uses this module as a transitive dependency',\n    'electron-installer-dmg': 'already uses this module as a transitive dependency',\n    'electron-installer-flatpak': 'already uses this module as a transitive dependency',\n    'electron-installer-redhat': 'already uses this module as a transitive dependency',\n    'electron-osx-sign': 'already uses this module as a transitive dependency',\n    'electron-packager': 'already uses this module as a transitive dependency',\n    'electron-winstaller': 'already uses this module as a transitive dependency',\n  };\n\n  let electronName;\n  for (const key of keys) {\n    if (key === 'electron' || key === 'electron-prebuilt') {\n      delete packageJSON.dependencies[key];\n      delete packageJSON.devDependencies[key];\n      electronName = key;\n    } else if (buildToolPackages[key]) {\n      const explanation = buildToolPackages[key];\n      // eslint-disable-next-line max-len\n      const shouldRemoveDependency = await confirmIfInteractive(interactive, `Do you want us to remove the \"${key}\" dependency in package.json? Electron Forge ${explanation}.`);\n\n      if (shouldRemoveDependency) {\n        delete packageJSON.dependencies[key];\n        delete packageJSON.devDependencies[key];\n      }\n    }\n  }\n\n  const writeChanges = async () => {\n    await asyncOra('Writing modified package.json file', async () => {\n      await fs.writeFile(path.resolve(dir, 'package.json'), `${JSON.stringify(packageJSON, null, 2)}\\n`);\n    });\n  };\n\n  let electronVersion;\n  if (electronName) {\n    const electronPackageJSON = await readPackageJSON(path.resolve(dir, 'node_modules', electronName));\n    electronVersion = electronPackageJSON.version;\n    packageJSON.devDependencies['electron-prebuilt-compile'] = electronVersion;\n  }\n\n  await writeChanges();\n\n  if (electronName) {\n    await asyncOra('Pruning deleted modules', async () => {\n      await new Promise((resolve) => {\n        d('attempting to prune node_modules in:', dir);\n        const child = yarnOrNPMSpawn(hasYarn() ? [] : ['prune'], {\n          cwd: dir,\n          stdio: 'ignore',\n        });\n        child.on('exit', () => resolve());\n      });\n    });\n\n    await asyncOra('Installing dependencies', async () => {\n      d('deleting old dependencies forcefully');\n      await fs.remove(path.resolve(dir, 'node_modules/.bin/electron'));\n      await fs.remove(path.resolve(dir, 'node_modules/.bin/electron.cmd'));\n      await fs.remove(path.resolve(dir, 'node_modules', electronName));\n\n      d('installing dependencies');\n      await installDepList(dir, deps);\n      d('installing devDependencies');\n      await installDepList(dir, devDeps, true);\n      d('installing electron-prebuilt-compile');\n      await installDepList(dir, [`electron-prebuilt-compile@${electronVersion}`], false, true);\n    });\n  }\n\n  packageJSON = await readPackageJSON(dir);\n\n  packageJSON.config = packageJSON.config || {};\n  const templatePackageJSON = await readPackageJSON(path.resolve(__dirname, '../tmpl'));\n  packageJSON.config.forge = templatePackageJSON.config.forge;\n\n  await writeChanges();\n\n  await asyncOra('Fixing .gitignore', async () => {\n    if (await fs.exists(path.resolve(dir, '.gitignore'))) {\n      const gitignore = await fs.readFile(path.resolve(dir, '.gitignore'));\n      if (!gitignore.includes('out')) {\n        await fs.writeFile(path.resolve(dir, '.gitignore'), `${gitignore}\\nout/`);\n      }\n    }\n  });\n\n  let babelConfig = packageJSON.babel;\n  const babelPath = path.resolve(dir, '.babelrc');\n  if (!babelConfig && await fs.exists(babelPath)) {\n    babelConfig = JSON.parse(await fs.readFile(babelPath, 'utf8'));\n  }\n\n  if (babelConfig) {\n    await asyncOra('Porting original babel config', async () => {\n      let compileConfig = {};\n      const compilePath = path.resolve(dir, '.compilerc');\n      if (await fs.exists(compilePath)) {\n        compileConfig = JSON.parse(await fs.readFile(compilePath, 'utf8'));\n      }\n\n      await fs.writeFile(compilePath, JSON.stringify(Object.assign(compileConfig, {\n        'application/javascript': babelConfig,\n      }), null, 2));\n    });\n\n    console.info('NOTE: You might be able to remove your `.compilerc` file completely if you are only using the `es2015` and `react` presets'.yellow);\n  }\n\n  console.info(`\n\nWe have ATTEMPTED to convert your app to be in a format that electron-forge understands.\nNothing much will have changed but we added the ${'\"electron-prebuilt-compile\"'.cyan} dependency.  This is \\\nthe dependency you must version bump to get newer versions of Electron.\n\n\nWe also tried to import any build tooling you already had but we can't get everything.  You might need to convert any CLI/gulp/grunt tasks yourself.\n\nAlso please note if you are using \\`preload\\` scripts you need to follow the steps outlined \\\nat https://github.com/electron-userland/electron-forge/wiki/Using-%27preload%27-scripts\n\nThanks for using ${'\"electron-forge\"'.green}!!!`);\n};\n",
    "static": true,
    "longname": "api/import.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "d",
    "memberof": "api/import.js",
    "static": true,
    "longname": "api/import.js~d",
    "access": null,
    "export": false,
    "importPath": "electron-forge/dist/api/import",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "typedef",
    "name": "ImportOptions",
    "memberof": "api/import.js",
    "static": true,
    "longname": "api/import.js~ImportOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be imported"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ImportOptions"
    }
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "import",
    "memberof": "api/import.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/import.js~import",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/import",
    "importStyle": "import",
    "description": "Attempt to import a given module directory to the Electron Forge standard.\n\n- Replaces the prebuilt electron package with the one that integrates with `electron-compile`\n- Sets up `git` and the correct NPM dependencies\n- Adds a template forge config to `package.json`",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "ImportOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the import method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the import process is complete"
    }
  },
  {
    "__docId__": 4,
    "kind": "file",
    "name": "api/index.js",
    "content": "import 'colors';\n\nimport _import from './import';\nimport init from './init';\nimport install from './install';\nimport lint from './lint';\nimport make from './make';\nimport _package from './package';\nimport publish from './publish';\nimport start from './start';\n\nimport getForgeConfig from '../util/forge-config';\nimport readPackageJSON from '../util/read-package-json';\n\nmodule.exports = {\n  'import': _import, // eslint-disable-line\n  init,\n  install,\n  lint,\n  make,\n  'package': _package, // eslint-disable-line\n  publish,\n  start,\n  utils: {\n    getForgeConfig,\n    readPackageJSON,\n  },\n};\n",
    "static": true,
    "longname": "api/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "api/init.js",
    "content": "import debug from 'debug';\n\nimport initCustom from '../init/init-custom';\nimport initDirectory from '../init/init-directory';\nimport initGit from '../init/init-git';\nimport initNPM from '../init/init-npm';\nimport initStandardFix from '../init/init-standard-fix';\nimport initStarter from '../init/init-starter-files';\n\nimport asyncOra from '../util/ora-handler';\n\nconst d = debug('electron-forge:init');\n\n/**\n * @typedef {Object} InitOptions\n * @property {string} [dir=process.cwd()] The path to the app to be initialized\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [lintstyle=airbnb] The lintstyle to pass through to the template creator\n * @property {string} [template] The custom template to use. If left empty, the default template is used\n */\n\n/**\n * Initialize a new Electron Forge template project in the given directory.\n *\n * @param {InitOptions} providedOptions - Options for the init method\n * @return {Promise} Will resolve when the initialization process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, lintstyle, template } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    lintstyle: 'airbnb',\n    template: null,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  d(`Initializing in: ${dir}`);\n\n  if (!template) {\n    lintstyle = lintstyle.toLowerCase();\n    if (!['airbnb', 'standard'].includes(lintstyle)) {\n      d(`Unrecognized lintstyle argument: '${lintstyle}' -- defaulting to 'airbnb'`);\n      lintstyle = 'airbnb';\n    }\n  }\n\n  await initDirectory(dir, interactive);\n  await initGit(dir);\n  await initStarter(dir, template ? undefined : lintstyle);\n  await initNPM(dir, template ? undefined : lintstyle);\n  if (!template) {\n    if (lintstyle === 'standard') {\n      await initStandardFix(dir);\n    }\n  } else {\n    await initCustom(dir, template, lintstyle);\n  }\n};\n",
    "static": true,
    "longname": "api/init.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "d",
    "memberof": "api/init.js",
    "static": true,
    "longname": "api/init.js~d",
    "access": null,
    "export": false,
    "importPath": "electron-forge/dist/api/init",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "typedef",
    "name": "InitOptions",
    "memberof": "api/init.js",
    "static": true,
    "longname": "api/init.js~InitOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be initialized"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "airbnb",
        "defaultRaw": "airbnb",
        "name": "lintstyle",
        "description": "The lintstyle to pass through to the template creator"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "template",
        "description": "The custom template to use. If left empty, the default template is used"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InitOptions"
    }
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "init",
    "memberof": "api/init.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/init.js~init",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/init",
    "importStyle": "init",
    "description": "Initialize a new Electron Forge template project in the given directory.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "InitOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the init method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the initialization process is complete"
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "api/install.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport fetch from 'node-fetch';\nimport fs from 'fs-promise';\nimport inquirer from 'inquirer';\nimport nugget from 'nugget';\nimport opn from 'opn';\nimport os from 'os';\nimport path from 'path';\nimport pify from 'pify';\nimport semver from 'semver';\n\nimport asyncOra from '../util/ora-handler';\n\nimport darwinDMGInstaller from '../installers/darwin/dmg';\nimport darwinZipInstaller from '../installers/darwin/zip';\nimport linuxDebInstaller from '../installers/linux/deb';\nimport linuxRPMInstaller from '../installers/linux/rpm';\n\nconst d = debug('electron-forge:install');\n\nconst GITHUB_API = 'https://api.github.com';\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [prerelease=false] Whether to install prerelease versions\n * @property {string} repo The GitHub repository to install from, in the format owner/name\n * @property {function} chooseAsset A function that must return the asset to use/install from a provided array of compatible GitHub assets\n */\n\n/**\n * Install an Electron application from GitHub. If you leave interactive as `false`, you MUST provide a `chooseAsset` function.\n *\n * @param {InstallOptions} providedOptions - Options for the install method\n * @return {Promise} Will resolve when the install process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { interactive, prerelease, repo, chooseAsset } = Object.assign({\n    interactive: false,\n    prerelease: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  let latestRelease;\n  let possibleAssets = [];\n\n  await asyncOra('Searching for Application', async (searchSpinner) => {\n    if (!repo || repo.indexOf('/') === -1) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'Invalid repository name, must be in the format owner/name';\n    }\n\n    d('searching for repo:', repo);\n    let releases;\n    try {\n      releases = await (await fetch(`${GITHUB_API}/repos/${repo}/releases`)).json();\n    } catch (err) {\n      // Ignore error\n    }\n\n    if (!releases || releases.message === 'Not Found' || !Array.isArray(releases)) {\n      // eslint-disable-next-line no-throw-literal\n      throw `Failed to find releases for repository \"${repo}\".  Please check the name and try again.`;\n    }\n\n    releases = releases.filter(release => !release.prerelease || prerelease);\n\n    const sortedReleases = releases.sort((releaseA, releaseB) => {\n      let tagA = releaseA.tag_name;\n      if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);\n      let tagB = releaseB.tag_name;\n      if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);\n      return (semver.gt(tagB, tagA) ? 1 : -1);\n    });\n    latestRelease = sortedReleases[0];\n\n    searchSpinner.text = 'Searching for Releases'; // eslint-disable-line\n\n    const assets = latestRelease.assets;\n    if (!assets || !Array.isArray(assets)) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'Could not find any assets for the latest release';\n    }\n\n    const installTargets = {\n      win32: [/\\.exe$/],\n      darwin: [/OSX.*\\.zip$/, /darwin.*\\.zip$/, /macOS.*\\.zip$/, /mac.*\\.zip$/, /\\.dmg$/],\n      linux: [/\\.rpm$/, /\\.deb$/],\n    };\n\n    possibleAssets = assets.filter((asset) => {\n      const targetSuffixes = installTargets[process.platform];\n      for (const suffix of targetSuffixes) {\n        if (suffix.test(asset.name)) return true;\n      }\n      return false;\n    });\n\n    if (possibleAssets.length === 0) {\n      // eslint-disable-next-line no-throw-literal\n      throw `Failed to find any installable assets for target platform: ${`${process.platform}`.cyan}`;\n    }\n  });\n\n  console.info(`Found latest release${prerelease ? ' (including prereleases)' : ''}: ${latestRelease.tag_name.cyan}`);\n\n  let targetAsset = possibleAssets[0];\n  if (possibleAssets.length > 1) {\n    if (chooseAsset) {\n      targetAsset = await Promise.resolve(chooseAsset(possibleAssets));\n    } else if (!interactive) {\n      const choices = [];\n      possibleAssets.forEach((asset) => {\n        choices.push({ name: asset.name, value: asset.id });\n      });\n      const { assetID } = await inquirer.createPromptModule()({\n        type: 'list',\n        name: 'assetID',\n        message: 'Multiple potential assets found, please choose one from the list below:'.cyan,\n        choices,\n      });\n\n      targetAsset = possibleAssets.find(asset => asset.id === assetID);\n    } else {\n      // eslint-disable-next-line no-throw-literal\n      throw 'expected a chooseAsset function to be provided but it was not';\n    }\n  }\n\n  const tmpdir = path.resolve(os.tmpdir(), 'forge-install');\n  const pathSafeRepo = repo.replace(/[/\\\\]/g, '-');\n  const filename = `${pathSafeRepo}-${latestRelease.tag_name}-${targetAsset.name}`;\n\n  const fullFilePath = path.resolve(tmpdir, filename);\n  if (!await fs.exists(fullFilePath) || (await fs.stat(fullFilePath)).size !== targetAsset.size) {\n    await fs.mkdirs(tmpdir);\n\n    const nuggetOpts = {\n      target: filename,\n      dir: tmpdir,\n      resume: true,\n      strictSSL: true,\n    };\n    await pify(nugget)(targetAsset.browser_download_url, nuggetOpts);\n  }\n\n  await asyncOra('Installing Application', async (installSpinner) => {\n    const installActions = {\n      win32: {\n        '.exe': async filePath => await opn(filePath, { wait: false }),\n      },\n      darwin: {\n        '.zip': darwinZipInstaller,\n        '.dmg': darwinDMGInstaller,\n      },\n      linux: {\n        '.deb': linuxDebInstaller,\n        '.rpm': linuxRPMInstaller,\n      },\n    };\n\n    const suffixFnIdent = Object.keys(installActions[process.platform]).find(suffix => targetAsset.name.endsWith(suffix));\n    await installActions[process.platform][suffixFnIdent](fullFilePath, installSpinner);\n  });\n};\n",
    "static": true,
    "longname": "api/install.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "d",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~d",
    "access": null,
    "export": false,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "GITHUB_API",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~GITHUB_API",
    "access": null,
    "export": false,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "typedef",
    "name": "InstallOptions",
    "memberof": "api/install.js",
    "static": true,
    "longname": "api/install.js~InstallOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "prerelease",
        "description": "Whether to install prerelease versions"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "repo",
        "description": "The GitHub repository to install from, in the format owner/name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "chooseAsset",
        "description": "A function that must return the asset to use/install from a provided array of compatible GitHub assets"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InstallOptions"
    }
  },
  {
    "__docId__": 13,
    "kind": "function",
    "name": "install",
    "memberof": "api/install.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/install.js~install",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/install",
    "importStyle": "install",
    "description": "Install an Electron application from GitHub. If you leave interactive as `false`, you MUST provide a `chooseAsset` function.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "InstallOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the install method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the install process is complete"
    }
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "api/lint.js",
    "content": "import 'colors';\nimport debug from 'debug';\nimport { spawn as yarnOrNPMSpawn } from 'yarn-or-npm';\n\nimport asyncOra from '../util/ora-handler';\nimport resolveDir from '../util/resolve-dir';\n\nconst d = debug('electron-forge:lint');\n\n/**\n * @typedef {Object} LintOptions\n * @property {string} [dir=process.cwd()] The path to the module to import\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n */\n\n/**\n * Lint a local Electron application.\n *\n * The promise will be rejected with the stdout+stderr of the linting process if linting fails or\n * will be resolved if it succeeds.\n *\n * @param {LintOptions} providedOptions - Options for the Lint method\n * @return {Promise<null, string>} Will resolve when the lint process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  let success = true;\n  let result = null;\n\n  await asyncOra('Linting Application', async (lintSpinner) => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'Failed to locate lintable Electron application';\n    }\n\n    d('executing \"run lint -- --color\" in dir:', dir);\n    const child = yarnOrNPMSpawn(['run', 'lint', '--', '--color'], {\n      stdio: process.platform === 'win32' ? 'inherit' : 'pipe',\n      cwd: dir,\n    });\n    const output = [];\n    if (process.platform !== 'win32') {\n      child.stdout.on('data', data => output.push(data.toString()));\n      child.stderr.on('data', data => output.push(data.toString().red));\n    }\n    await new Promise((resolve) => {\n      child.on('exit', (code) => {\n        if (code !== 0) {\n          success = false;\n          lintSpinner.fail();\n          if (interactive) {\n            output.forEach(data => process.stdout.write(data));\n            process.exit(code);\n          } else {\n            result = output.join('');\n          }\n        }\n        resolve();\n      });\n    });\n  });\n\n  if (!success) {\n    throw result;\n  }\n};\n",
    "static": true,
    "longname": "api/lint.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "d",
    "memberof": "api/lint.js",
    "static": true,
    "longname": "api/lint.js~d",
    "access": null,
    "export": false,
    "importPath": "electron-forge/dist/api/lint",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "typedef",
    "name": "LintOptions",
    "memberof": "api/lint.js",
    "static": true,
    "longname": "api/lint.js~LintOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the module to import"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LintOptions"
    }
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "lint",
    "memberof": "api/lint.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/lint.js~lint",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/lint",
    "importStyle": "lint",
    "description": "Lint a local Electron application.\n\nThe promise will be rejected with the stdout+stderr of the linting process if linting fails or\nwill be resolved if it succeeds.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "LintOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Lint method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null, string>"
      ],
      "spread": false,
      "description": "Will resolve when the lint process is complete"
    }
  },
  {
    "__docId__": 18,
    "kind": "file",
    "name": "api/make.js",
    "content": "import 'colors';\nimport fs from 'fs-promise';\nimport path from 'path';\n\nimport asyncOra from '../util/ora-handler';\nimport electronHostArch from '../util/electron-host-arch';\nimport getForgeConfig from '../util/forge-config';\nimport readPackageJSON from '../util/read-package-json';\nimport requireSearch from '../util/require-search';\nimport resolveDir from '../util/resolve-dir';\n\nimport packager from './package';\n\n/**\n * @typedef {Object} MakeOptions\n * @property {string} [dir=process.cwd()] The path to the app from which distributables are generated\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [skipPackage=false] Whether to skip the pre-make packaging step\n * @property {Array<string>} [overrideTargets] An array of make targets to override your forge config\n * @property {string} [arch=host architecture] The target architecture\n * @property {string} [platform=process.platform] The target platform. NOTE: This is limited to be the current platform at the moment\n */\n\n/**\n * Make distributables for an Electron application.\n *\n * @param {MakeOptions} providedOptions - Options for the make method\n * @return {Promise} Will resolve when the make process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, skipPackage, overrideTargets, arch, platform } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    skipPackage: false,\n    arch: electronHostArch(),\n    platform: process.platform,\n  }, providedOptions);\n  asyncOra.interactive = interactive;\n\n  let forgeConfig;\n  await asyncOra('Resolving Forge Config', async () => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'Failed to locate makeable Electron application';\n    }\n\n    forgeConfig = await getForgeConfig(dir);\n  });\n\n  if (platform && platform !== process.platform && !(process.platform === 'darwin' && platform === 'mas')) {\n    console.error('You can not \"make\" for a platform other than your systems platform'.red);\n    process.exit(1);\n  }\n\n  if (!skipPackage) {\n    console.info('We need to package your application before we can make it'.green);\n    await packager({\n      dir,\n      interactive,\n      arch,\n      platform,\n    });\n  } else {\n    console.warn('WARNING: Skipping the packaging step, this could result in an out of date build'.red);\n  }\n\n  const declaredArch = arch;\n  const declaredPlatform = platform;\n\n  let targets = forgeConfig.make_targets[declaredPlatform];\n  if (overrideTargets) {\n    targets = overrideTargets;\n  }\n\n  console.info('Making for the following targets:', `${targets.join(', ')}`.cyan);\n\n  let targetArchs = [declaredArch];\n  if (declaredArch === 'all') {\n    switch (process.platform) {\n      case 'darwin':\n        targetArchs = ['x64'];\n        break;\n      case 'linux':\n        targetArchs = ['ia32', 'x64', 'armv7l'];\n        break;\n      case 'win32':\n      default:\n        targetArchs = ['ia32', 'x64'];\n        break;\n    }\n  }\n\n  const packageJSON = await readPackageJSON(dir);\n  const appName = packageJSON.productName || packageJSON.name;\n  const outputs = [];\n\n  for (const targetArch of targetArchs) {\n    const packageDir = path.resolve(dir, `out/${appName}-${declaredPlatform}-${targetArch}`);\n    if (!(await fs.exists(packageDir))) {\n      throw new Error(`Couldn't find packaged app at: ${packageDir}`);\n    }\n\n    for (const target of targets) {\n      // eslint-disable-next-line no-loop-func\n      await asyncOra(`Making for target: ${target.cyan} - On platform: ${declaredPlatform.cyan} - For arch: ${targetArch.cyan}`, async () => {\n        const maker = requireSearch(path.resolve(__dirname, '..'), [\n          `./makers/${process.platform}/${target}.js`,\n          `./makers/generic/${target}.js`,\n          `electron-forge-maker-${target}`,\n        ]);\n        if (!maker) {\n          // eslint-disable-next-line no-throw-literal\n          throw `Could not find a build target with the name: ${target} for the platform: ${declaredPlatform}`;\n        }\n        try {\n          outputs.push(await (maker.default || maker)(packageDir, appName, targetArch, forgeConfig, packageJSON));\n        } catch (err) {\n          if (err) {\n            // eslint-disable-next-line no-throw-literal\n            throw {\n              message: `An error occured while making for target: ${target}`,\n              stack: `${err.message}\\n${err.stack}`,\n            };\n          } else {\n            throw new Error(`An unknown error occured while making for target: ${target}`);\n          }\n        }\n      });\n    }\n  }\n\n  return outputs;\n};\n",
    "static": true,
    "longname": "api/make.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 19,
    "kind": "typedef",
    "name": "MakeOptions",
    "memberof": "api/make.js",
    "static": true,
    "longname": "api/make.js~MakeOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app from which distributables are generated"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "skipPackage",
        "description": "Whether to skip the pre-make packaging step"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "overrideTargets",
        "description": "An array of make targets to override your forge config"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "host architecture",
        "defaultRaw": "host architecture",
        "name": "arch",
        "description": "The target architecture"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.platform",
        "defaultRaw": "process.platform",
        "name": "platform",
        "description": "The target platform. NOTE: This is limited to be the current platform at the moment"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MakeOptions"
    }
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "make",
    "memberof": "api/make.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/make.js~make",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/make",
    "importStyle": "make",
    "description": "Make distributables for an Electron application.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "MakeOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the make method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the make process is complete"
    }
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "api/package.js",
    "content": "import 'colors';\nimport fs from 'fs-promise';\nimport glob from 'glob';\nimport path from 'path';\nimport pify from 'pify';\nimport packager from 'electron-packager';\nimport ora from 'ora';\n\nimport electronHostArch from '../util/electron-host-arch';\nimport getForgeConfig from '../util/forge-config';\nimport packagerCompileHook from '../util/compile-hook';\nimport readPackageJSON from '../util/read-package-json';\nimport rebuildHook from '../util/rebuild';\nimport resolveDir from '../util/resolve-dir';\n\n/**\n * @typedef {Object} PackageOptions\n * @property {string} [dir=process.cwd()] The path to the app to package\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [arch=process.arch] The target arch\n * @property {string} [platform=process.platform] The target platform.  NOTE: This is limited to be the current platform at the moment\n */\n\n/**\n * Package an Electron application into an platform dependent format.\n *\n * @param {PackageOptions} providedOptions - Options for the Package method\n * @return {Promise} Will resolve when the package process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, arch, platform } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    arch: electronHostArch(),\n    platform: process.platform,\n  }, providedOptions);\n\n  let prepareSpinner = ora.ora(`Preparing to Package Application for arch: ${(arch === 'all' ? 'ia32' : arch).cyan}`).start();\n  let prepareCounter = 0;\n\n  dir = await resolveDir(dir);\n  if (!dir) {\n    // eslint-disable-next-line no-throw-literal\n    throw 'Failed to locate compilable Electron application';\n  }\n\n  const packageJSON = await readPackageJSON(dir);\n\n  const forgeConfig = await getForgeConfig(dir);\n  let packagerSpinner;\n\n  const packageOpts = Object.assign({\n    asar: false,\n    overwrite: true,\n  }, forgeConfig.electronPackagerConfig, {\n    afterCopy: [async (buildPath, electronVersion, pPlatform, pArch, done) => {\n      if (packagerSpinner) {\n        packagerSpinner.succeed();\n        prepareCounter += 1;\n        prepareSpinner = ora.ora(`Preparing to Package Application for arch: ${(prepareCounter === 2 ? 'armv7l' : 'x64').cyan}`).start();\n      }\n      await fs.remove(path.resolve(buildPath, 'node_modules/electron-compile/test'));\n      const bins = await pify(glob)(path.join(buildPath, '**/.bin/**/*'));\n      for (const bin of bins) {\n        await fs.remove(bin);\n      }\n      done();\n    }, async (...args) => {\n      prepareSpinner.succeed();\n      await packagerCompileHook(dir, ...args);\n    }, async (buildPath, electronVersion, pPlatform, pArch, done) => {\n      await rebuildHook(buildPath, electronVersion, pPlatform, pArch);\n      packagerSpinner = ora.ora('Packaging Application').start();\n      done();\n    }].concat(forgeConfig.electronPackagerConfig.afterCopy ? forgeConfig.electronPackagerConfig.afterCopy.map(item =>\n      (typeof item === 'string' ? require(item) : item)\n    ) : []),\n    afterExtract: forgeConfig.electronPackagerConfig.afterExtract ? forgeConfig.electronPackagerConfig.afterExtract.map(item =>\n      (typeof item === 'string' ? require(item) : item)\n    ) : [],\n    dir,\n    arch,\n    platform,\n    out: path.resolve(dir, 'out'),\n    version: packageJSON.devDependencies['electron-prebuilt-compile'],\n  });\n  packageOpts.quiet = true;\n  if (typeof packageOpts.asar === 'object' && packageOpts.unpack) {\n    packagerSpinner.fail();\n    throw new Error('electron-compile does not support asar.unpack yet.  Please use asar.unpackDir');\n  }\n\n  await pify(packager)(packageOpts);\n\n  packagerSpinner.succeed();\n};\n",
    "static": true,
    "longname": "api/package.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "typedef",
    "name": "PackageOptions",
    "memberof": "api/package.js",
    "static": true,
    "longname": "api/package.js~PackageOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to package"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.arch",
        "defaultRaw": "process.arch",
        "name": "arch",
        "description": "The target arch"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.platform",
        "defaultRaw": "process.platform",
        "name": "platform",
        "description": "The target platform.  NOTE: This is limited to be the current platform at the moment"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PackageOptions"
    }
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "package",
    "memberof": "api/package.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/package.js~package",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/package",
    "importStyle": "package",
    "description": "Package an Electron application into an platform dependent format.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "PackageOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Package method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the package process is complete"
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "api/publish.js",
    "content": "import 'colors';\n\nimport asyncOra from '../util/ora-handler';\nimport getForgeConfig from '../util/forge-config';\nimport readPackageJSON from '../util/read-package-json';\nimport requireSearch from '../util/require-search';\nimport resolveDir from '../util/resolve-dir';\n\nimport make from './make';\n\n/**\n * @typedef {Object} PublishOptions\n * @property {string} [dir=process.cwd()] The path to the app to be published\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [authToken] An authentication token to use when publishing\n * @property {string} [tag=packageJSON.version] The string to tag this release with\n * @property {string} [target=github] The publish target\n * @property {MakeOptions} [makeOptions] Options object to passed through to make()\n */\n\n/**\n * Publish an Electron application into the given target service.\n *\n * @param {PublishOptions} providedOptions - Options for the Publish method\n * @return {Promise} Will resolve when the publish process is complete\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, authToken, tag, target, makeOptions } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    tag: null,\n    makeOptions: {},\n    target: 'github',\n  }, providedOptions);\n\n  const makeResults = await make(makeOptions);\n\n  dir = await resolveDir(dir);\n  if (!dir) {\n    // eslint-disable-next-line no-throw-literal\n    throw 'Failed to locate publishable Electron application';\n  }\n\n  const artifacts = makeResults.reduce((accum, arr) => {\n    accum.push(...arr);\n    return accum;\n  }, []);\n\n  const packageJSON = await readPackageJSON(dir);\n\n  const forgeConfig = await getForgeConfig(dir);\n\n  let publisher;\n  await asyncOra(`Resolving publish target: ${`${target}`.cyan}`, async () => {\n    publisher = requireSearch(__dirname, [\n      `./publishers/${target}.js`,\n      `electron-forge-publisher-${target}`,\n    ]);\n    if (!publisher) {\n      throw `Could not find a publish target with the name: ${target}`; // eslint-disable-line\n    }\n  });\n\n  await publisher(artifacts, packageJSON, forgeConfig, authToken, tag);\n};\n",
    "static": true,
    "longname": "api/publish.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "typedef",
    "name": "PublishOptions",
    "memberof": "api/publish.js",
    "static": true,
    "longname": "api/publish.js~PublishOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be published"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "authToken",
        "description": "An authentication token to use when publishing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "packageJSON.version",
        "defaultRaw": "packageJSON.version",
        "name": "tag",
        "description": "The string to tag this release with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "github",
        "defaultRaw": "github",
        "name": "target",
        "description": "The publish target"
      },
      {
        "nullable": null,
        "types": [
          "MakeOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "Options object to passed through to make()"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PublishOptions"
    }
  },
  {
    "__docId__": 26,
    "kind": "function",
    "name": "publish",
    "memberof": "api/publish.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/publish.js~publish",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/publish",
    "importStyle": "publish",
    "description": "Publish an Electron application into the given target service.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublishOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Publish method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the publish process is complete"
    }
  },
  {
    "__docId__": 27,
    "kind": "file",
    "name": "api/start.js",
    "content": "import 'colors';\nimport { spawn } from 'child_process';\nimport path from 'path';\n\nimport asyncOra from '../util/ora-handler';\nimport readPackageJSON from '../util/read-package-json';\nimport rebuild from '../util/rebuild';\nimport resolveDir from '../util/resolve-dir';\n\n/**\n * @typedef {Object} StartOptions\n * @property {string} [dir=process.cwd()] The path to the app to be run\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [enableLogging=false] Enables advanced internal Electron debug calls\n * @property {Array<string>} [args] Arguments to pass through to the launched Electron application\n */\n\n/**\n * Start an Electron application.\n *\n * @param {StartOptions} providedOptions - Options for the Publish method\n * @return {Promise} Will resolve when the application is launched\n */\nexport default async (providedOptions = {}) => {\n  // eslint-disable-next-line prefer-const, no-unused-vars\n  let { dir, interactive, enableLogging, args } = Object.assign({\n    dir: process.cwd(),\n    interactive: false,\n    enableLogging: false,\n    args: [],\n  }, providedOptions);\n\n  await asyncOra('Locating Application', async () => {\n    dir = await resolveDir(dir);\n    if (!dir) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'Failed to locate startable Electron application';\n    }\n  });\n\n  const packageJSON = await readPackageJSON(dir);\n\n  await rebuild(dir, packageJSON.devDependencies['electron-prebuilt-compile'], process.platform, process.arch);\n\n  const spawnOpts = {\n    cwd: dir,\n    stdio: 'inherit',\n    env: Object.assign({}, process.env, enableLogging ? {\n      ELECTRON_ENABLE_LOGGING: true,\n      ELECTRON_ENABLE_STACK_DUMPING: true,\n    } : {}),\n  };\n  await asyncOra('Launching Application', async () => {\n    if (process.platform === 'win32') {\n      spawn(path.resolve(dir, 'node_modules/.bin/electron.cmd'), ['.'].concat(args), spawnOpts);\n    } else {\n      spawn(path.resolve(dir, 'node_modules/.bin/electron'), ['.'].concat(args), spawnOpts);\n    }\n  });\n};\n",
    "static": true,
    "longname": "api/start.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 28,
    "kind": "typedef",
    "name": "StartOptions",
    "memberof": "api/start.js",
    "static": true,
    "longname": "api/start.js~StartOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "dir",
        "description": "The path to the app to be run"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "interactive",
        "description": "Whether to use sensible defaults or prompt the user visually"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "enableLogging",
        "description": "Enables advanced internal Electron debug calls"
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": "Arguments to pass through to the launched Electron application"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StartOptions"
    }
  },
  {
    "__docId__": 29,
    "kind": "function",
    "name": "start",
    "memberof": "api/start.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "api/start.js~start",
    "access": null,
    "export": true,
    "importPath": "electron-forge/dist/api/start",
    "importStyle": "start",
    "description": "Start an Electron application.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "StartOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "providedOptions",
        "description": "Options for the Publish method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Will resolve when the application is launched"
    }
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]