'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var checkGitExists = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new _promise2.default(function (resolve) {
              (0, _child_process.exec)('git --version', function (err) {
                if (err) return resolve(false);
                resolve(true);
              });
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function checkGitExists() {
    return _ref.apply(this, arguments);
  };
}();

var checkNodeVersion = function () {
  var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', _promise2.default.resolve(_semver2.default.gt(process.versions.node, '6.0.0')));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function checkNodeVersion() {
    return _ref2.apply(this, arguments);
  };
}();

var checkPackageManagerVersion = function () {
  var _ref3 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(ora) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', (0, _yarnOrNpm.yarnOrNpmSpawn)(['--version']).then(function (version) {
              if ((0, _yarnOrNpm.hasYarn)()) {
                warnIfPackageManagerIsntAKnownGoodVersion('Yarn', version, YARN_WHITELISTED_VERSIONS, ora);
              } else {
                warnIfPackageManagerIsntAKnownGoodVersion('NPM', version, NPM_WHITELISTED_VERSIONS, ora);
              }

              return true;
            }));

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function checkPackageManagerVersion(_x) {
    return _ref3.apply(this, arguments);
  };
}();

exports.isNightlyYarnVersion = isNightlyYarnVersion;

var _child_process = require('child_process');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _yarnOrNpm = require('./yarn-or-npm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NPM_WHITELISTED_VERSIONS = {
  all: '^3.0.0 || ^4.0.0 || ~5.1.0 || ~5.2.0 || >= 5.4.2',
  darwin: '>= 5.4.0',
  linux: '>= 5.4.0'
};
var YARN_WHITELISTED_VERSIONS = {
  all: '0.23.3 || 0.24.6 || >= 1.0.0',
  darwin: '0.27.5',
  linux: '0.27.5'
};

function isNightlyYarnVersion(version) {
  return (/((?:\d\.?)+)-\d.*/.test(version)
  );
}

function warnIfPackageManagerIsntAKnownGoodVersion(packageManager, version, whitelistedVersions, ora) {
  var osVersions = whitelistedVersions[process.platform];
  var versions = osVersions ? whitelistedVersions.all + ' || ' + osVersions : whitelistedVersions.all;
  var versionString = version.toString();
  if (isNightlyYarnVersion(versionString) || !_semver2.default.satisfies(versionString, versions)) {
    ora.warn('You are using ' + packageManager + ', but not a known good version.\n' + ('The known versions that work with Electron Forge are: ' + versions));
  }
}

exports.default = function () {
  var _ref4 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(ora) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _promise2.default.all([checkGitExists(ora), checkNodeVersion(ora), checkPackageManagerVersion(ora)]);

          case 2:
            _context4.t0 = function (check) {
              return check;
            };

            return _context4.abrupt('return', _context4.sent.every(_context4.t0));

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY2hlY2stc3lzdGVtLmpzIl0sIm5hbWVzIjpbInJlc29sdmUiLCJlcnIiLCJjaGVja0dpdEV4aXN0cyIsImd0IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsImNoZWNrTm9kZVZlcnNpb24iLCJvcmEiLCJ0aGVuIiwidmVyc2lvbiIsIndhcm5JZlBhY2thZ2VNYW5hZ2VySXNudEFLbm93bkdvb2RWZXJzaW9uIiwiWUFSTl9XSElURUxJU1RFRF9WRVJTSU9OUyIsIk5QTV9XSElURUxJU1RFRF9WRVJTSU9OUyIsImNoZWNrUGFja2FnZU1hbmFnZXJWZXJzaW9uIiwiaXNOaWdodGx5WWFyblZlcnNpb24iLCJhbGwiLCJkYXJ3aW4iLCJsaW51eCIsInRlc3QiLCJwYWNrYWdlTWFuYWdlciIsIndoaXRlbGlzdGVkVmVyc2lvbnMiLCJvc1ZlcnNpb25zIiwicGxhdGZvcm0iLCJ2ZXJzaW9uU3RyaW5nIiwidG9TdHJpbmciLCJzYXRpc2ZpZXMiLCJ3YXJuIiwiY2hlY2siLCJldmVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7K0VBS0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDZDQUNTLHNCQUFZLFVBQUNBLE9BQUQsRUFBYTtBQUM5Qix1Q0FBSyxlQUFMLEVBQXNCLFVBQUNDLEdBQUQsRUFBUztBQUM3QixvQkFBSUEsR0FBSixFQUFTLE9BQU9ELFFBQVEsS0FBUixDQUFQO0FBQ1RBLHdCQUFRLElBQVI7QUFDRCxlQUhEO0FBSUQsYUFMTSxDQURUOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEc7O2tCQUFlRSxjOzs7Ozs7Z0ZBU2Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDhDQUNTLGtCQUFRRixPQUFSLENBQWdCLGlCQUFPRyxFQUFQLENBQVVDLFFBQVFDLFFBQVIsQ0FBaUJDLElBQTNCLEVBQWlDLE9BQWpDLENBQWhCLENBRFQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRzs7a0JBQWVDLGdCOzs7Ozs7Z0ZBK0JmLGtCQUEwQ0MsR0FBMUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDhDQUNTLCtCQUFlLENBQUMsV0FBRCxDQUFmLEVBQ0pDLElBREksQ0FDQyxVQUFDQyxPQUFELEVBQWE7QUFDakIsa0JBQUkseUJBQUosRUFBZTtBQUNiQywwREFBMEMsTUFBMUMsRUFBa0RELE9BQWxELEVBQTJERSx5QkFBM0QsRUFBc0ZKLEdBQXRGO0FBQ0QsZUFGRCxNQUVPO0FBQ0xHLDBEQUEwQyxLQUExQyxFQUFpREQsT0FBakQsRUFBMERHLHdCQUExRCxFQUFvRkwsR0FBcEY7QUFDRDs7QUFFRCxxQkFBTyxJQUFQO0FBQ0QsYUFUSSxDQURUOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEc7O2tCQUFlTSwwQjs7Ozs7UUFoQkNDLG9CLEdBQUFBLG9COztBQTdCaEI7O0FBQ0E7Ozs7QUFFQTs7OztBQWVBLElBQU1GLDJCQUEyQjtBQUMvQkcsT0FBSyxrREFEMEI7QUFFL0JDLFVBQVEsVUFGdUI7QUFHL0JDLFNBQU87QUFId0IsQ0FBakM7QUFLQSxJQUFNTiw0QkFBNEI7QUFDaENJLE9BQUssOEJBRDJCO0FBRWhDQyxVQUFRLFFBRndCO0FBR2hDQyxTQUFPO0FBSHlCLENBQWxDOztBQU1PLFNBQVNILG9CQUFULENBQThCTCxPQUE5QixFQUF1QztBQUM1QyxTQUFPLHFCQUFvQlMsSUFBcEIsQ0FBeUJULE9BQXpCO0FBQVA7QUFDRDs7QUFFRCxTQUFTQyx5Q0FBVCxDQUFtRFMsY0FBbkQsRUFBbUVWLE9BQW5FLEVBQTRFVyxtQkFBNUUsRUFBaUdiLEdBQWpHLEVBQXNHO0FBQ3BHLE1BQU1jLGFBQWFELG9CQUFvQmpCLFFBQVFtQixRQUE1QixDQUFuQjtBQUNBLE1BQU1sQixXQUFXaUIsYUFBZ0JELG9CQUFvQkwsR0FBcEMsWUFBOENNLFVBQTlDLEdBQTZERCxvQkFBb0JMLEdBQWxHO0FBQ0EsTUFBTVEsZ0JBQWdCZCxRQUFRZSxRQUFSLEVBQXRCO0FBQ0EsTUFBSVYscUJBQXFCUyxhQUFyQixLQUF1QyxDQUFDLGlCQUFPRSxTQUFQLENBQWlCRixhQUFqQixFQUFnQ25CLFFBQWhDLENBQTVDLEVBQXVGO0FBQ3JGRyxRQUFJbUIsSUFBSixDQUNFLG1CQUFpQlAsY0FBakIscUdBQ3lEZixRQUR6RCxDQURGO0FBSUQ7QUFDRjs7O2dGQWVjLGtCQUFnQkcsR0FBaEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ0Msa0JBQVFRLEdBQVIsQ0FBWSxDQUFDZCxlQUFlTSxHQUFmLENBQUQsRUFBc0JELGlCQUFpQkMsR0FBakIsQ0FBdEIsRUFBNkNNLDJCQUEyQk4sR0FBM0IsQ0FBN0MsQ0FBWixDQUREOztBQUFBO0FBQUEsMkJBRUo7QUFBQSxxQkFBU29CLEtBQVQ7QUFBQSxhQUZJOztBQUFBLDZEQUVWQyxLQUZVOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJmaWxlIjoidXRpbC9jaGVjay1zeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7IGhhc1lhcm4sIHlhcm5Pck5wbVNwYXduIH0gZnJvbSAnLi95YXJuLW9yLW5wbSc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrR2l0RXhpc3RzKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBleGVjKCdnaXQgLS12ZXJzaW9uJywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xuICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrTm9kZVZlcnNpb24oKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2VtdmVyLmd0KHByb2Nlc3MudmVyc2lvbnMubm9kZSwgJzYuMC4wJykpO1xufVxuXG5jb25zdCBOUE1fV0hJVEVMSVNURURfVkVSU0lPTlMgPSB7XG4gIGFsbDogJ14zLjAuMCB8fCBeNC4wLjAgfHwgfjUuMS4wIHx8IH41LjIuMCB8fCA+PSA1LjQuMicsXG4gIGRhcndpbjogJz49IDUuNC4wJyxcbiAgbGludXg6ICc+PSA1LjQuMCcsXG59O1xuY29uc3QgWUFSTl9XSElURUxJU1RFRF9WRVJTSU9OUyA9IHtcbiAgYWxsOiAnMC4yMy4zIHx8IDAuMjQuNiB8fCA+PSAxLjAuMCcsXG4gIGRhcndpbjogJzAuMjcuNScsXG4gIGxpbnV4OiAnMC4yNy41Jyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05pZ2h0bHlZYXJuVmVyc2lvbih2ZXJzaW9uKSB7XG4gIHJldHVybiAvKCg/OlxcZFxcLj8pKyktXFxkLiovLnRlc3QodmVyc2lvbik7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlBhY2thZ2VNYW5hZ2VySXNudEFLbm93bkdvb2RWZXJzaW9uKHBhY2thZ2VNYW5hZ2VyLCB2ZXJzaW9uLCB3aGl0ZWxpc3RlZFZlcnNpb25zLCBvcmEpIHtcbiAgY29uc3Qgb3NWZXJzaW9ucyA9IHdoaXRlbGlzdGVkVmVyc2lvbnNbcHJvY2Vzcy5wbGF0Zm9ybV07XG4gIGNvbnN0IHZlcnNpb25zID0gb3NWZXJzaW9ucyA/IGAke3doaXRlbGlzdGVkVmVyc2lvbnMuYWxsfSB8fCAke29zVmVyc2lvbnN9YCA6IHdoaXRlbGlzdGVkVmVyc2lvbnMuYWxsO1xuICBjb25zdCB2ZXJzaW9uU3RyaW5nID0gdmVyc2lvbi50b1N0cmluZygpO1xuICBpZiAoaXNOaWdodGx5WWFyblZlcnNpb24odmVyc2lvblN0cmluZykgfHwgIXNlbXZlci5zYXRpc2ZpZXModmVyc2lvblN0cmluZywgdmVyc2lvbnMpKSB7XG4gICAgb3JhLndhcm4oXG4gICAgICBgWW91IGFyZSB1c2luZyAke3BhY2thZ2VNYW5hZ2VyfSwgYnV0IG5vdCBhIGtub3duIGdvb2QgdmVyc2lvbi5cXG5gICtcbiAgICAgIGBUaGUga25vd24gdmVyc2lvbnMgdGhhdCB3b3JrIHdpdGggRWxlY3Ryb24gRm9yZ2UgYXJlOiAke3ZlcnNpb25zfWBcbiAgICApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrUGFja2FnZU1hbmFnZXJWZXJzaW9uKG9yYSkge1xuICByZXR1cm4geWFybk9yTnBtU3Bhd24oWyctLXZlcnNpb24nXSlcbiAgICAudGhlbigodmVyc2lvbikgPT4ge1xuICAgICAgaWYgKGhhc1lhcm4oKSkge1xuICAgICAgICB3YXJuSWZQYWNrYWdlTWFuYWdlcklzbnRBS25vd25Hb29kVmVyc2lvbignWWFybicsIHZlcnNpb24sIFlBUk5fV0hJVEVMSVNURURfVkVSU0lPTlMsIG9yYSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuSWZQYWNrYWdlTWFuYWdlcklzbnRBS25vd25Hb29kVmVyc2lvbignTlBNJywgdmVyc2lvbiwgTlBNX1dISVRFTElTVEVEX1ZFUlNJT05TLCBvcmEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKG9yYSkge1xuICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtjaGVja0dpdEV4aXN0cyhvcmEpLCBjaGVja05vZGVWZXJzaW9uKG9yYSksIGNoZWNrUGFja2FnZU1hbmFnZXJWZXJzaW9uKG9yYSldKSlcbiAgICAuZXZlcnkoY2hlY2sgPT4gY2hlY2spO1xufVxuIl19