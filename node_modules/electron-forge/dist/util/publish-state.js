'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _bluebird = require('bluebird');

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EXTENSION = '.forge.publish';

var PublishState = function () {
  (0, _createClass3.default)(PublishState, null, [{
    key: 'loadFromDirectory',
    value: function () {
      var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee(directory) {
        var _this = this;

        var publishes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

        return _regenerator2.default.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _fsExtra2.default.exists(directory);

              case 2:
                if (_context2.sent) {
                  _context2.next = 4;
                  break;
                }

                throw new Error('Attempted to load publish state from a missing directory: ' + directory);

              case 4:
                publishes = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 8;
                _loop = /*#__PURE__*/_regenerator2.default.mark(function _loop() {
                  var dirName, subDir, states, filePaths, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, filePath, state;

                  return _regenerator2.default.wrap(function _loop$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          dirName = _step.value;
                          subDir = _path2.default.resolve(directory, dirName);
                          states = [];
                          _context.next = 5;
                          return _fsExtra2.default.stat(subDir);

                        case 5:
                          if (!_context.sent.isDirectory()) {
                            _context.next = 39;
                            break;
                          }

                          _context.next = 8;
                          return _fsExtra2.default.readdir(subDir);

                        case 8:
                          _context.t0 = function (fileName) {
                            return fileName.endsWith(EXTENSION);
                          };

                          _context.t1 = function (fileName) {
                            return _path2.default.resolve(subDir, fileName);
                          };

                          filePaths = _context.sent.filter(_context.t0).map(_context.t1);
                          _iteratorNormalCompletion2 = true;
                          _didIteratorError2 = false;
                          _iteratorError2 = undefined;
                          _context.prev = 14;
                          _iterator2 = (0, _getIterator3.default)(filePaths);

                        case 16:
                          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                            _context.next = 25;
                            break;
                          }

                          filePath = _step2.value;
                          state = new PublishState(filePath);
                          _context.next = 21;
                          return state.load();

                        case 21:
                          states.push(state);

                        case 22:
                          _iteratorNormalCompletion2 = true;
                          _context.next = 16;
                          break;

                        case 25:
                          _context.next = 31;
                          break;

                        case 27:
                          _context.prev = 27;
                          _context.t2 = _context['catch'](14);
                          _didIteratorError2 = true;
                          _iteratorError2 = _context.t2;

                        case 31:
                          _context.prev = 31;
                          _context.prev = 32;

                          if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                          }

                        case 34:
                          _context.prev = 34;

                          if (!_didIteratorError2) {
                            _context.next = 37;
                            break;
                          }

                          throw _iteratorError2;

                        case 37:
                          return _context.finish(34);

                        case 38:
                          return _context.finish(31);

                        case 39:
                          publishes.push(states);

                        case 40:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _loop, _this, [[14, 27, 31, 39], [32,, 34, 38]]);
                });
                _context2.t0 = _getIterator3.default;
                _context2.next = 13;
                return _fsExtra2.default.readdir(directory);

              case 13:
                _context2.t1 = _context2.sent;
                _iterator = (0, _context2.t0)(_context2.t1);

              case 15:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 20;
                  break;
                }

                return _context2.delegateYield(_loop(), 't2', 17);

              case 17:
                _iteratorNormalCompletion = true;
                _context2.next = 15;
                break;

              case 20:
                _context2.next = 26;
                break;

              case 22:
                _context2.prev = 22;
                _context2.t3 = _context2['catch'](8);
                _didIteratorError = true;
                _iteratorError = _context2.t3;

              case 26:
                _context2.prev = 26;
                _context2.prev = 27;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 29:
                _context2.prev = 29;

                if (!_didIteratorError) {
                  _context2.next = 32;
                  break;
                }

                throw _iteratorError;

              case 32:
                return _context2.finish(29);

              case 33:
                return _context2.finish(26);

              case 34:
                return _context2.abrupt('return', publishes);

              case 35:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee, this, [[8, 22, 26, 34], [27,, 29, 33]]);
      }));

      function loadFromDirectory(_x) {
        return _ref.apply(this, arguments);
      }

      return loadFromDirectory;
    }()
  }, {
    key: 'saveToDirectory',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(directory, artifacts) {
        var id, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, artifact, state;

        return _regenerator2.default.wrap(function _callee2$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                id = _crypto2.default.createHash('SHA256').update((0, _stringify2.default)(artifacts)).digest('hex');
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context3.prev = 4;
                _iterator3 = (0, _getIterator3.default)(artifacts);

              case 6:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context3.next = 15;
                  break;
                }

                artifact = _step3.value;
                state = new PublishState(_path2.default.resolve(directory, id, 'null'), '', false);

                state.setState(artifact);
                _context3.next = 12;
                return state.saveToDisk();

              case 12:
                _iteratorNormalCompletion3 = true;
                _context3.next = 6;
                break;

              case 15:
                _context3.next = 21;
                break;

              case 17:
                _context3.prev = 17;
                _context3.t0 = _context3['catch'](4);
                _didIteratorError3 = true;
                _iteratorError3 = _context3.t0;

              case 21:
                _context3.prev = 21;
                _context3.prev = 22;

                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }

              case 24:
                _context3.prev = 24;

                if (!_didIteratorError3) {
                  _context3.next = 27;
                  break;
                }

                throw _iteratorError3;

              case 27:
                return _context3.finish(24);

              case 28:
                return _context3.finish(21);

              case 29:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee2, this, [[4, 17, 21, 29], [22,, 24, 28]]);
      }));

      function saveToDirectory(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return saveToDirectory;
    }()
  }]);

  function PublishState(filePath) {
    var hasHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    (0, _classCallCheck3.default)(this, PublishState);

    this.dir = _path2.default.dirname(filePath);
    this.path = filePath;
    this.hasHash = hasHash;
  }

  (0, _createClass3.default)(PublishState, [{
    key: 'generateHash',
    value: function generateHash() {
      var content = (0, _stringify2.default)(this.state || {});
      return _crypto2.default.createHash('SHA256').update(content).digest('hex');
    }
  }, {
    key: 'setState',
    value: function setState(state) {
      this.state = state;
    }
  }, {
    key: 'load',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _fsExtra2.default.readJson(this.path);

              case 2:
                this.state = _context4.sent;

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee3, this);
      }));

      function load() {
        return _ref3.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: 'saveToDisk',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!this.hasHash) {
                  this.path = _path2.default.resolve(this.dir, '' + this.generateHash() + EXTENSION);
                  this.hasHash = true;
                }

                _context5.next = 3;
                return _fsExtra2.default.mkdirs(_path2.default.dirname(this.path));

              case 3:
                _context5.next = 5;
                return _fsExtra2.default.writeJson(this.path, this.state);

              case 5:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee4, this);
      }));

      function saveToDisk() {
        return _ref4.apply(this, arguments);
      }

      return saveToDisk;
    }()
  }]);
  return PublishState;
}();

exports.default = PublishState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHVibGlzaC1zdGF0ZS5qcyJdLCJuYW1lcyI6WyJFWFRFTlNJT04iLCJQdWJsaXNoU3RhdGUiLCJkaXJlY3RvcnkiLCJleGlzdHMiLCJFcnJvciIsInB1Ymxpc2hlcyIsImRpck5hbWUiLCJzdWJEaXIiLCJyZXNvbHZlIiwic3RhdGVzIiwic3RhdCIsImlzRGlyZWN0b3J5IiwicmVhZGRpciIsImZpbGVOYW1lIiwiZW5kc1dpdGgiLCJmaWxlUGF0aHMiLCJmaWx0ZXIiLCJtYXAiLCJmaWxlUGF0aCIsInN0YXRlIiwibG9hZCIsInB1c2giLCJhcnRpZmFjdHMiLCJpZCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJhcnRpZmFjdCIsInNldFN0YXRlIiwic2F2ZVRvRGlzayIsImhhc0hhc2giLCJkaXIiLCJkaXJuYW1lIiwicGF0aCIsImNvbnRlbnQiLCJyZWFkSnNvbiIsImdlbmVyYXRlSGFzaCIsIm1rZGlycyIsIndyaXRlSnNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsWUFBWSxnQkFBbEI7O0lBRXFCQyxZOzs7O29HQUNZQyxTOzs7Ozs7Ozs7O3VCQUNsQixrQkFBR0MsTUFBSCxDQUFVRCxTQUFWLEM7Ozs7Ozs7O3NCQUNILElBQUlFLEtBQUosZ0VBQXVFRixTQUF2RSxDOzs7QUFHRkcseUIsR0FBWSxFOzs7Ozs7Ozs7Ozs7QUFDUEMsaUM7QUFDSEMsZ0MsR0FBUyxlQUFLQyxPQUFMLENBQWFOLFNBQWIsRUFBd0JJLE9BQXhCLEM7QUFDVEcsZ0MsR0FBUyxFOztpQ0FDSixrQkFBR0MsSUFBSCxDQUFRSCxNQUFSLEM7Ozs2Q0FBaUJJLFc7Ozs7OztpQ0FDRCxrQkFBR0MsT0FBSCxDQUFXTCxNQUFYLEM7Ozt3Q0FDZjtBQUFBLG1DQUFZTSxTQUFTQyxRQUFULENBQWtCZCxTQUFsQixDQUFaO0FBQUEsMkI7O3dDQUNIO0FBQUEsbUNBQVksZUFBS1EsT0FBTCxDQUFhRCxNQUFiLEVBQXFCTSxRQUFyQixDQUFaO0FBQUEsMkI7O0FBRkRFLG1DLGlCQUNIQyxNLGNBQ0FDLEc7Ozs7O2tFQUVvQkYsUzs7Ozs7Ozs7QUFBWkcsa0M7QUFDSEMsK0IsR0FBUSxJQUFJbEIsWUFBSixDQUFpQmlCLFFBQWpCLEM7O2lDQUNSQyxNQUFNQyxJQUFOLEU7OztBQUNOWCxpQ0FBT1ksSUFBUCxDQUFZRixLQUFaOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHSmQsb0NBQVVnQixJQUFWLENBQWVaLE1BQWY7Ozs7Ozs7Ozs7O3VCQWQwQixrQkFBR0csT0FBSCxDQUFXVixTQUFYLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREFnQnJCRyxTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NHQUdvQkgsUyxFQUFXb0IsUzs7Ozs7OztBQUNoQ0Msa0IsR0FBSyxpQkFBT0MsVUFBUCxDQUFrQixRQUFsQixFQUE0QkMsTUFBNUIsQ0FBbUMseUJBQWVILFNBQWYsQ0FBbkMsRUFBOERJLE1BQTlELENBQXFFLEtBQXJFLEM7Ozs7O3dEQUNZSixTOzs7Ozs7OztBQUFaSyx3QjtBQUNIUixxQixHQUFRLElBQUlsQixZQUFKLENBQWlCLGVBQUtPLE9BQUwsQ0FBYU4sU0FBYixFQUF3QnFCLEVBQXhCLEVBQTRCLE1BQTVCLENBQWpCLEVBQXNELEVBQXRELEVBQTBELEtBQTFELEM7O0FBQ2RKLHNCQUFNUyxRQUFOLENBQWVELFFBQWY7O3VCQUNNUixNQUFNVSxVQUFOLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlWLHdCQUFZWCxRQUFaLEVBQXNDO0FBQUEsUUFBaEJZLE9BQWdCLHVFQUFOLElBQU07QUFBQTs7QUFDcEMsU0FBS0MsR0FBTCxHQUFXLGVBQUtDLE9BQUwsQ0FBYWQsUUFBYixDQUFYO0FBQ0EsU0FBS2UsSUFBTCxHQUFZZixRQUFaO0FBQ0EsU0FBS1ksT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7Ozs7bUNBRWM7QUFDYixVQUFNSSxVQUFVLHlCQUFlLEtBQUtmLEtBQUwsSUFBYyxFQUE3QixDQUFoQjtBQUNBLGFBQU8saUJBQU9LLFVBQVAsQ0FBa0IsUUFBbEIsRUFBNEJDLE1BQTVCLENBQW1DUyxPQUFuQyxFQUE0Q1IsTUFBNUMsQ0FBbUQsS0FBbkQsQ0FBUDtBQUNEOzs7NkJBRVFQLEssRUFBTztBQUNkLFdBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNEOzs7Ozs7Ozs7O3VCQUdvQixrQkFBR2dCLFFBQUgsQ0FBWSxLQUFLRixJQUFqQixDOzs7QUFBbkIscUJBQUtkLEs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlMLG9CQUFJLENBQUMsS0FBS1csT0FBVixFQUFtQjtBQUNqQix1QkFBS0csSUFBTCxHQUFZLGVBQUt6QixPQUFMLENBQWEsS0FBS3VCLEdBQWxCLE9BQTBCLEtBQUtLLFlBQUwsRUFBMUIsR0FBZ0RwQyxTQUFoRCxDQUFaO0FBQ0EsdUJBQUs4QixPQUFMLEdBQWUsSUFBZjtBQUNEOzs7dUJBRUssa0JBQUdPLE1BQUgsQ0FBVSxlQUFLTCxPQUFMLENBQWEsS0FBS0MsSUFBbEIsQ0FBVixDOzs7O3VCQUNBLGtCQUFHSyxTQUFILENBQWEsS0FBS0wsSUFBbEIsRUFBd0IsS0FBS2QsS0FBN0IsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBN0RXbEIsWSIsImZpbGUiOiJ1dGlsL3B1Ymxpc2gtc3RhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IEVYVEVOU0lPTiA9ICcuZm9yZ2UucHVibGlzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1Ymxpc2hTdGF0ZSB7XG4gIHN0YXRpYyBhc3luYyBsb2FkRnJvbURpcmVjdG9yeShkaXJlY3RvcnkpIHtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhkaXJlY3RvcnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRlZCB0byBsb2FkIHB1Ymxpc2ggc3RhdGUgZnJvbSBhIG1pc3NpbmcgZGlyZWN0b3J5OiAke2RpcmVjdG9yeX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwdWJsaXNoZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGRpck5hbWUgb2YgYXdhaXQgZnMucmVhZGRpcihkaXJlY3RvcnkpKSB7XG4gICAgICBjb25zdCBzdWJEaXIgPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBkaXJOYW1lKTtcbiAgICAgIGNvbnN0IHN0YXRlcyA9IFtdO1xuICAgICAgaWYgKChhd2FpdCBmcy5zdGF0KHN1YkRpcikpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgY29uc3QgZmlsZVBhdGhzID0gKGF3YWl0IGZzLnJlYWRkaXIoc3ViRGlyKSlcbiAgICAgICAgICAuZmlsdGVyKGZpbGVOYW1lID0+IGZpbGVOYW1lLmVuZHNXaXRoKEVYVEVOU0lPTikpXG4gICAgICAgICAgLm1hcChmaWxlTmFtZSA9PiBwYXRoLnJlc29sdmUoc3ViRGlyLCBmaWxlTmFtZSkpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZVBhdGggb2YgZmlsZVBhdGhzKSB7XG4gICAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgUHVibGlzaFN0YXRlKGZpbGVQYXRoKTtcbiAgICAgICAgICBhd2FpdCBzdGF0ZS5sb2FkKCk7XG4gICAgICAgICAgc3RhdGVzLnB1c2goc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdWJsaXNoZXMucHVzaChzdGF0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGlzaGVzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVUb0RpcmVjdG9yeShkaXJlY3RvcnksIGFydGlmYWN0cykge1xuICAgIGNvbnN0IGlkID0gY3J5cHRvLmNyZWF0ZUhhc2goJ1NIQTI1NicpLnVwZGF0ZShKU09OLnN0cmluZ2lmeShhcnRpZmFjdHMpKS5kaWdlc3QoJ2hleCcpO1xuICAgIGZvciAoY29uc3QgYXJ0aWZhY3Qgb2YgYXJ0aWZhY3RzKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IG5ldyBQdWJsaXNoU3RhdGUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgaWQsICdudWxsJyksICcnLCBmYWxzZSk7XG4gICAgICBzdGF0ZS5zZXRTdGF0ZShhcnRpZmFjdCk7XG4gICAgICBhd2FpdCBzdGF0ZS5zYXZlVG9EaXNrKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZVBhdGgsIGhhc0hhc2ggPSB0cnVlKSB7XG4gICAgdGhpcy5kaXIgPSBwYXRoLmRpcm5hbWUoZmlsZVBhdGgpO1xuICAgIHRoaXMucGF0aCA9IGZpbGVQYXRoO1xuICAgIHRoaXMuaGFzSGFzaCA9IGhhc0hhc2g7XG4gIH1cblxuICBnZW5lcmF0ZUhhc2goKSB7XG4gICAgY29uc3QgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUgfHwge30pO1xuICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnU0hBMjU2JykudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdCgnaGV4Jyk7XG4gIH1cblxuICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IGF3YWl0IGZzLnJlYWRKc29uKHRoaXMucGF0aCk7XG4gIH1cblxuICBhc3luYyBzYXZlVG9EaXNrKCkge1xuICAgIGlmICghdGhpcy5oYXNIYXNoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoLnJlc29sdmUodGhpcy5kaXIsIGAke3RoaXMuZ2VuZXJhdGVIYXNoKCl9JHtFWFRFTlNJT059YCk7XG4gICAgICB0aGlzLmhhc0hhc2ggPSB0cnVlO1xuICAgIH1cblxuICAgIGF3YWl0IGZzLm1rZGlycyhwYXRoLmRpcm5hbWUodGhpcy5wYXRoKSk7XG4gICAgYXdhaXQgZnMud3JpdGVKc29uKHRoaXMucGF0aCwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cbiJdfQ==