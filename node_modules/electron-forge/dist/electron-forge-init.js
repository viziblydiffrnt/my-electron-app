'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

require('./util/terminate');

var _api = require('./api');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
  var dir, initOpts;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          dir = process.cwd();

          _commander2.default.version(require('../package.json').version).arguments('[name]').option('-t, --template [name]', 'Name of the forge template to use').option('-l, --lintStyle [style]', 'Linting standard to follow.  For the default template it can be "airbnb" or "standard"', 'airbnb').option('-c, --copy-ci-files', 'Whether to copy the templated CI files (defaults to false)', false).action(function (name) {
            if (!name) return;
            if (_path2.default.isAbsolute(name)) {
              dir = name;
            } else {
              dir = _path2.default.resolve(dir, name);
            }
          }).parse(process.argv);

          initOpts = {
            dir: dir,
            interactive: true,
            lintStyle: _commander2.default.lintStyle,
            copyCIFiles: !!_commander2.default.copyCiFiles
          };

          if (_commander2.default.template) initOpts.template = _commander2.default.template;

          _context.next = 6;
          return (0, _api.init)(initOpts);

        case 6:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZWN0cm9uLWZvcmdlLWluaXQuanMiXSwibmFtZXMiOlsiZGlyIiwicHJvY2VzcyIsImN3ZCIsInZlcnNpb24iLCJyZXF1aXJlIiwiYXJndW1lbnRzIiwib3B0aW9uIiwiYWN0aW9uIiwibmFtZSIsImlzQWJzb2x1dGUiLCJyZXNvbHZlIiwicGFyc2UiLCJhcmd2IiwiaW5pdE9wdHMiLCJpbnRlcmFjdGl2ZSIsImxpbnRTdHlsZSIsImNvcHlDSUZpbGVzIiwiY29weUNpRmlsZXMiLCJ0ZW1wbGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxrRUFBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDS0EsYUFETCxHQUNXQyxRQUFRQyxHQUFSLEVBRFg7O0FBRUMsOEJBQ0dDLE9BREgsQ0FDV0MsUUFBUSxpQkFBUixFQUEyQkQsT0FEdEMsRUFFR0UsU0FGSCxDQUVhLFFBRmIsRUFHR0MsTUFISCxDQUdVLHVCQUhWLEVBR21DLG1DQUhuQyxFQUlHQSxNQUpILENBSVUseUJBSlYsRUFJcUMsd0ZBSnJDLEVBSStILFFBSi9ILEVBS0dBLE1BTEgsQ0FLVSxxQkFMVixFQUtpQyw0REFMakMsRUFLK0YsS0FML0YsRUFNR0MsTUFOSCxDQU1VLFVBQUNDLElBQUQsRUFBVTtBQUNoQixnQkFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDWCxnQkFBSSxlQUFLQyxVQUFMLENBQWdCRCxJQUFoQixDQUFKLEVBQTJCO0FBQ3pCUixvQkFBTVEsSUFBTjtBQUNELGFBRkQsTUFFTztBQUNMUixvQkFBTSxlQUFLVSxPQUFMLENBQWFWLEdBQWIsRUFBa0JRLElBQWxCLENBQU47QUFDRDtBQUNGLFdBYkgsRUFjR0csS0FkSCxDQWNTVixRQUFRVyxJQWRqQjs7QUFnQk1DLGtCQWxCUCxHQWtCa0I7QUFDZmIsb0JBRGU7QUFFZmMseUJBQWEsSUFGRTtBQUdmQyx1QkFBVyxvQkFBUUEsU0FISjtBQUlmQyx5QkFBYSxDQUFDLENBQUMsb0JBQVFDO0FBSlIsV0FsQmxCOztBQXdCQyxjQUFJLG9CQUFRQyxRQUFaLEVBQXNCTCxTQUFTSyxRQUFULEdBQW9CLG9CQUFRQSxRQUE1Qjs7QUF4QnZCO0FBQUEsaUJBMEJPLGVBQUtMLFFBQUwsQ0ExQlA7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBRCIsImZpbGUiOiJlbGVjdHJvbi1mb3JnZS1pbml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuaW1wb3J0IHsgaW5pdCB9IGZyb20gJy4vYXBpJztcblxuKGFzeW5jICgpID0+IHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tuYW1lXScpXG4gICAgLm9wdGlvbignLXQsIC0tdGVtcGxhdGUgW25hbWVdJywgJ05hbWUgb2YgdGhlIGZvcmdlIHRlbXBsYXRlIHRvIHVzZScpXG4gICAgLm9wdGlvbignLWwsIC0tbGludFN0eWxlIFtzdHlsZV0nLCAnTGludGluZyBzdGFuZGFyZCB0byBmb2xsb3cuICBGb3IgdGhlIGRlZmF1bHQgdGVtcGxhdGUgaXQgY2FuIGJlIFwiYWlyYm5iXCIgb3IgXCJzdGFuZGFyZFwiJywgJ2FpcmJuYicpXG4gICAgLm9wdGlvbignLWMsIC0tY29weS1jaS1maWxlcycsICdXaGV0aGVyIHRvIGNvcHkgdGhlIHRlbXBsYXRlZCBDSSBmaWxlcyAoZGVmYXVsdHMgdG8gZmFsc2UpJywgZmFsc2UpXG4gICAgLmFjdGlvbigobmFtZSkgPT4ge1xuICAgICAgaWYgKCFuYW1lKSByZXR1cm47XG4gICAgICBpZiAocGF0aC5pc0Fic29sdXRlKG5hbWUpKSB7XG4gICAgICAgIGRpciA9IG5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXIgPSBwYXRoLnJlc29sdmUoZGlyLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IGluaXRPcHRzID0ge1xuICAgIGRpcixcbiAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICBsaW50U3R5bGU6IHByb2dyYW0ubGludFN0eWxlLFxuICAgIGNvcHlDSUZpbGVzOiAhIXByb2dyYW0uY29weUNpRmlsZXMsXG4gIH07XG4gIGlmIChwcm9ncmFtLnRlbXBsYXRlKSBpbml0T3B0cy50ZW1wbGF0ZSA9IHByb2dyYW0udGVtcGxhdGU7XG5cbiAgYXdhaXQgaW5pdChpbml0T3B0cyk7XG59KSgpO1xuIl19