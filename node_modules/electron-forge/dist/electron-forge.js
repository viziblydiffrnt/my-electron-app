#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

require('colors');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _tabtab = require('tabtab');

var _tabtab2 = _interopRequireDefault(_tabtab);

require('./util/terminate');

var _oraHandler = require('./util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _checkSystem = require('./util/check-system');

var _checkSystem2 = _interopRequireDefault(_checkSystem);

var _config = require('./util/config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var originalSC = _commander2.default.executeSubCommand.bind(_commander2.default);
_commander2.default.executeSubCommand = function (argv, args, unknown) {
  var indexOfDoubleDash = process.argv.indexOf('--');
  indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;

  var passThroughArgs = args.filter(function (arg) {
    return process.argv.indexOf(arg) > indexOfDoubleDash;
  });
  var normalArgs = args.filter(function (arg) {
    return process.argv.indexOf(arg) <= indexOfDoubleDash;
  });

  var newArgs = args;
  var newUnknown = unknown;
  if (passThroughArgs.length > 0) {
    newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
    newUnknown = [];
  }
  return originalSC(argv, newArgs, newUnknown);
};

_commander2.default.version(require('../package.json').version).option('--verbose', 'Enables verbose mode').command('init', 'Initialize a new Electron application').command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"').command('lint', 'Lints the current Electron application').command('package', 'Package the current Electron application').command('make', 'Generate distributables for the current Electron application').command('start', 'Start the current Electron application').command('publish', 'Publish the current Electron application to GitHub').command('install', 'Install an Electron application from GitHub');

var tab = (0, _tabtab2.default)({
  name: 'electron-forge'
});
tab.on('electron-forge', function (data, done) {
  if (data.line.split(' ').length <= 2) {
    done(null, _commander2.default.commands.filter(function (cmd) {
      return cmd._name.startsWith(data.lastPartial);
    }).map(function (cmd) {
      return cmd._name + ':' + cmd._description;
    }).sort());
  } else {
    done(null, []);
  }
});
tab.start();

if (process.argv[2] !== 'completion') {
  (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var goodSystem;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            goodSystem = void 0;
            _context2.next = 3;
            return (0, _oraHandler2.default)('Checking your system', function () {
              var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee(ora) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return (0, _checkSystem2.default)(ora);

                      case 2:
                        goodSystem = _context.sent;

                      case 3:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              }));

              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }());

          case 3:

            if (!goodSystem) {
              console.error(('It looks like you are missing some dependencies you need to get Electron running.\n' + 'Make sure you have git installed and Node.js version 6.0.0+').red);
              process.exit(1);
            }

            _commander2.default.parse(process.argv);

            _config2.default.reset();
            _config2.default.set('verbose', !!_commander2.default.verbose);

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }))();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZWN0cm9uLWZvcmdlLmpzIl0sIm5hbWVzIjpbIm9yaWdpbmFsU0MiLCJleGVjdXRlU3ViQ29tbWFuZCIsImJpbmQiLCJhcmd2IiwiYXJncyIsInVua25vd24iLCJpbmRleE9mRG91YmxlRGFzaCIsInByb2Nlc3MiLCJpbmRleE9mIiwibGVuZ3RoIiwicGFzc1Rocm91Z2hBcmdzIiwiZmlsdGVyIiwiYXJnIiwibm9ybWFsQXJncyIsIm5ld0FyZ3MiLCJuZXdVbmtub3duIiwiY29uY2F0IiwidmVyc2lvbiIsInJlcXVpcmUiLCJvcHRpb24iLCJjb21tYW5kIiwidGFiIiwibmFtZSIsIm9uIiwiZGF0YSIsImRvbmUiLCJsaW5lIiwic3BsaXQiLCJjb21tYW5kcyIsImNtZCIsIl9uYW1lIiwic3RhcnRzV2l0aCIsImxhc3RQYXJ0aWFsIiwibWFwIiwiX2Rlc2NyaXB0aW9uIiwic29ydCIsInN0YXJ0IiwiZ29vZFN5c3RlbSIsIm9yYSIsImNvbnNvbGUiLCJlcnJvciIsInJlZCIsImV4aXQiLCJwYXJzZSIsInJlc2V0Iiwic2V0IiwidmVyYm9zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxhQUFhLG9CQUFRQyxpQkFBUixDQUEwQkMsSUFBMUIscUJBQW5CO0FBQ0Esb0JBQVFELGlCQUFSLEdBQTRCLFVBQUNFLElBQUQsRUFBT0MsSUFBUCxFQUFhQyxPQUFiLEVBQXlCO0FBQ25ELE1BQUlDLG9CQUFvQkMsUUFBUUosSUFBUixDQUFhSyxPQUFiLENBQXFCLElBQXJCLENBQXhCO0FBQ0FGLHNCQUFvQkEsb0JBQW9CLENBQXBCLEdBQXdCQyxRQUFRSixJQUFSLENBQWFNLE1BQWIsR0FBc0IsQ0FBOUMsR0FBa0RILGlCQUF0RTs7QUFFQSxNQUFNSSxrQkFBa0JOLEtBQUtPLE1BQUwsQ0FBWTtBQUFBLFdBQU9KLFFBQVFKLElBQVIsQ0FBYUssT0FBYixD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QUFBQTtBQUFBLEdBQUQ7QUFpQkQiLCJmaWxlIjoiZWxlY3Ryb24tZm9yZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAnY29sb3JzJztcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgdGFidGFiIGZyb20gJ3RhYnRhYic7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5pbXBvcnQgYXN5bmNPcmEgZnJvbSAnLi91dGlsL29yYS1oYW5kbGVyJztcbmltcG9ydCBjaGVja1N5c3RlbSBmcm9tICcuL3V0aWwvY2hlY2stc3lzdGVtJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi91dGlsL2NvbmZpZyc7XG5cbmNvbnN0IG9yaWdpbmFsU0MgPSBwcm9ncmFtLmV4ZWN1dGVTdWJDb21tYW5kLmJpbmQocHJvZ3JhbSk7XG5wcm9ncmFtLmV4ZWN1dGVTdWJDb21tYW5kID0gKGFyZ3YsIGFyZ3MsIHVua25vd24pID0+IHtcbiAgbGV0IGluZGV4T2ZEb3VibGVEYXNoID0gcHJvY2Vzcy5hcmd2LmluZGV4T2YoJy0tJyk7XG4gIGluZGV4T2ZEb3VibGVEYXNoID0gaW5kZXhPZkRvdWJsZURhc2ggPCAwID8gcHJvY2Vzcy5hcmd2Lmxlbmd0aCArIDEgOiBpbmRleE9mRG91YmxlRGFzaDtcblxuICBjb25zdCBwYXNzVGhyb3VnaEFyZ3MgPSBhcmdzLmZpbHRlcihhcmcgPT4gcHJvY2Vzcy5hcmd2LmluZGV4T2YoYXJnKSA+IGluZGV4T2ZEb3VibGVEYXNoKTtcbiAgY29uc3Qgbm9ybWFsQXJncyA9IGFyZ3MuZmlsdGVyKGFyZyA9PiBwcm9jZXNzLmFyZ3YuaW5kZXhPZihhcmcpIDw9IGluZGV4T2ZEb3VibGVEYXNoKTtcblxuICBsZXQgbmV3QXJncyA9IGFyZ3M7XG4gIGxldCBuZXdVbmtub3duID0gdW5rbm93bjtcbiAgaWYgKHBhc3NUaHJvdWdoQXJncy5sZW5ndGggPiAwKSB7XG4gICAgbmV3QXJncyA9IG5vcm1hbEFyZ3MuY29uY2F0KHVua25vd24pLmNvbmNhdCgnLS0nKS5jb25jYXQocGFzc1Rocm91Z2hBcmdzKTtcbiAgICBuZXdVbmtub3duID0gW107XG4gIH1cbiAgcmV0dXJuIG9yaWdpbmFsU0MoYXJndiwgbmV3QXJncywgbmV3VW5rbm93bik7XG59O1xuXG5wcm9ncmFtXG4gIC52ZXJzaW9uKHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24pXG4gIC5vcHRpb24oJy0tdmVyYm9zZScsICdFbmFibGVzIHZlcmJvc2UgbW9kZScpXG4gIC5jb21tYW5kKCdpbml0JywgJ0luaXRpYWxpemUgYSBuZXcgRWxlY3Ryb24gYXBwbGljYXRpb24nKVxuICAuY29tbWFuZCgnaW1wb3J0JywgJ0F0dGVtcHRzIHRvIG5hdmlnYXRlIHlvdSB0aHJvdWdoIHRoZSBwcm9jZXNzIG9mIGltcG9ydGluZyBhbiBleGlzdGluZyBwcm9qZWN0IHRvIFwiZWxlY3Ryb24tZm9yZ2VcIicpXG4gIC5jb21tYW5kKCdsaW50JywgJ0xpbnRzIHRoZSBjdXJyZW50IEVsZWN0cm9uIGFwcGxpY2F0aW9uJylcbiAgLmNvbW1hbmQoJ3BhY2thZ2UnLCAnUGFja2FnZSB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdtYWtlJywgJ0dlbmVyYXRlIGRpc3RyaWJ1dGFibGVzIGZvciB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdzdGFydCcsICdTdGFydCB0aGUgY3VycmVudCBFbGVjdHJvbiBhcHBsaWNhdGlvbicpXG4gIC5jb21tYW5kKCdwdWJsaXNoJywgJ1B1Ymxpc2ggdGhlIGN1cnJlbnQgRWxlY3Ryb24gYXBwbGljYXRpb24gdG8gR2l0SHViJylcbiAgLmNvbW1hbmQoJ2luc3RhbGwnLCAnSW5zdGFsbCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbiBmcm9tIEdpdEh1YicpO1xuXG5jb25zdCB0YWIgPSB0YWJ0YWIoe1xuICBuYW1lOiAnZWxlY3Ryb24tZm9yZ2UnLFxufSk7XG50YWIub24oJ2VsZWN0cm9uLWZvcmdlJywgKGRhdGEsIGRvbmUpID0+IHtcbiAgaWYgKGRhdGEubGluZS5zcGxpdCgnICcpLmxlbmd0aCA8PSAyKSB7XG4gICAgZG9uZShcbiAgICAgIG51bGwsXG4gICAgICBwcm9ncmFtLmNvbW1hbmRzXG4gICAgICAgIC5maWx0ZXIoY21kID0+IGNtZC5fbmFtZS5zdGFydHNXaXRoKGRhdGEubGFzdFBhcnRpYWwpKVxuICAgICAgICAubWFwKGNtZCA9PiBgJHtjbWQuX25hbWV9OiR7Y21kLl9kZXNjcmlwdGlvbn1gKS5zb3J0KClcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGRvbmUobnVsbCwgW10pO1xuICB9XG59KTtcbnRhYi5zdGFydCgpO1xuXG5pZiAocHJvY2Vzcy5hcmd2WzJdICE9PSAnY29tcGxldGlvbicpIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBsZXQgZ29vZFN5c3RlbTtcbiAgICBhd2FpdCBhc3luY09yYSgnQ2hlY2tpbmcgeW91ciBzeXN0ZW0nLCBhc3luYyAob3JhKSA9PiB7XG4gICAgICBnb29kU3lzdGVtID0gYXdhaXQgY2hlY2tTeXN0ZW0ob3JhKTtcbiAgICB9KTtcblxuICAgIGlmICghZ29vZFN5c3RlbSkge1xuICAgICAgY29uc29sZS5lcnJvcigoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBtaXNzaW5nIHNvbWUgZGVwZW5kZW5jaWVzIHlvdSBuZWVkIHRvIGdldCBFbGVjdHJvbiBydW5uaW5nLlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAnTWFrZSBzdXJlIHlvdSBoYXZlIGdpdCBpbnN0YWxsZWQgYW5kIE5vZGUuanMgdmVyc2lvbiA2LjAuMCsnKS5yZWQpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cblxuICAgIHByb2dyYW0ucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICAgIGNvbmZpZy5yZXNldCgpO1xuICAgIGNvbmZpZy5zZXQoJ3ZlcmJvc2UnLCAhIXByb2dyYW0udmVyYm9zZSk7XG4gIH0pKCk7XG59XG4iXX0=