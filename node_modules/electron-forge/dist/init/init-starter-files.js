'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var d = (0, _debug2.default)('electron-forge:init:starter-files');

var copy = exports.copy = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee(source, target) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            d('copying "' + source + '" --> "' + target + '"');
            _context.next = 3;
            return _fsExtra2.default.copy(source, target);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function copy(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = function () {
  var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(dir, _ref3) {
    var lintStyle = _ref3.lintStyle,
        copyCIFiles = _ref3.copyCIFiles;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _oraHandler2.default)('Copying Starter Files', (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
              var tmplPath, rootFiles, srcFiles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _file;

              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      tmplPath = _path2.default.resolve(__dirname, '../../tmpl');


                      d('creating directory:', _path2.default.resolve(dir, 'src'));
                      _context2.next = 4;
                      return _fsExtra2.default.mkdirs(_path2.default.resolve(dir, 'src'));

                    case 4:
                      rootFiles = ['_gitignore', '_compilerc'];

                      if (copyCIFiles) rootFiles.push.apply(rootFiles, ['_travis.yml', '_appveyor.yml']);
                      if (lintStyle === 'airbnb') rootFiles.push('_eslintrc');
                      srcFiles = ['index.js', 'index.html'];
                      _iteratorNormalCompletion = true;
                      _didIteratorError = false;
                      _iteratorError = undefined;
                      _context2.prev = 11;
                      _iterator = (0, _getIterator3.default)(rootFiles);

                    case 13:
                      if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _context2.next = 20;
                        break;
                      }

                      file = _step.value;
                      _context2.next = 17;
                      return copy(_path2.default.resolve(tmplPath, file), _path2.default.resolve(dir, file.replace(/^_/, '.')));

                    case 17:
                      _iteratorNormalCompletion = true;
                      _context2.next = 13;
                      break;

                    case 20:
                      _context2.next = 26;
                      break;

                    case 22:
                      _context2.prev = 22;
                      _context2.t0 = _context2['catch'](11);
                      _didIteratorError = true;
                      _iteratorError = _context2.t0;

                    case 26:
                      _context2.prev = 26;
                      _context2.prev = 27;

                      if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                      }

                    case 29:
                      _context2.prev = 29;

                      if (!_didIteratorError) {
                        _context2.next = 32;
                        break;
                      }

                      throw _iteratorError;

                    case 32:
                      return _context2.finish(29);

                    case 33:
                      return _context2.finish(26);

                    case 34:
                      _iteratorNormalCompletion2 = true;
                      _didIteratorError2 = false;
                      _iteratorError2 = undefined;
                      _context2.prev = 37;
                      _iterator2 = (0, _getIterator3.default)(srcFiles);

                    case 39:
                      if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _context2.next = 46;
                        break;
                      }

                      _file = _step2.value;
                      _context2.next = 43;
                      return copy(_path2.default.resolve(tmplPath, _file), _path2.default.resolve(dir, 'src', _file));

                    case 43:
                      _iteratorNormalCompletion2 = true;
                      _context2.next = 39;
                      break;

                    case 46:
                      _context2.next = 52;
                      break;

                    case 48:
                      _context2.prev = 48;
                      _context2.t1 = _context2['catch'](37);
                      _didIteratorError2 = true;
                      _iteratorError2 = _context2.t1;

                    case 52:
                      _context2.prev = 52;
                      _context2.prev = 53;

                      if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                      }

                    case 55:
                      _context2.prev = 55;

                      if (!_didIteratorError2) {
                        _context2.next = 58;
                        break;
                      }

                      throw _iteratorError2;

                    case 58:
                      return _context2.finish(55);

                    case 59:
                      return _context2.finish(52);

                    case 60:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, undefined, [[11, 22, 26, 34], [27,, 29, 33], [37, 48, 52, 60], [53,, 55, 59]]);
            })));

          case 2:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQvaW5pdC1zdGFydGVyLWZpbGVzLmpzIl0sIm5hbWVzIjpbImQiLCJjb3B5Iiwic291cmNlIiwidGFyZ2V0IiwiZGlyIiwibGludFN0eWxlIiwiY29weUNJRmlsZXMiLCJ0bXBsUGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJta2RpcnMiLCJyb290RmlsZXMiLCJwdXNoIiwic3JjRmlsZXMiLCJmaWxlIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsSUFBTUEsSUFBSSxxQkFBTSxtQ0FBTixDQUFWOztBQUVPLElBQU1DO0FBQUEsK0VBQU8saUJBQU9DLE1BQVAsRUFBZUMsTUFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2xCSCw0QkFBY0UsTUFBZCxlQUE4QkMsTUFBOUI7QUFEa0I7QUFBQSxtQkFFWixrQkFBR0YsSUFBSCxDQUFRQyxNQUFSLEVBQWdCQyxNQUFoQixDQUZZOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQVA7O0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBTjs7O2dGQUtRLGtCQUFPQyxHQUFQO0FBQUEsUUFBY0MsU0FBZCxTQUFjQSxTQUFkO0FBQUEsUUFBeUJDLFdBQXpCLFNBQXlCQSxXQUF6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDUCwwQkFBUyx1QkFBVCxvRUFBa0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNoQ0MsOEJBRGdDLEdBQ3JCLGVBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixZQUF4QixDQURxQjs7O0FBR3RDVCx3QkFBRSxxQkFBRixFQUF5QixlQUFLUSxPQUFMLENBQWFKLEdBQWIsRUFBa0IsS0FBbEIsQ0FBekI7QUFIc0M7QUFBQSw2QkFJaEMsa0JBQUdNLE1BQUgsQ0FBVSxlQUFLRixPQUFMLENBQWFKLEdBQWIsRUFBa0IsS0FBbEIsQ0FBVixDQUpnQzs7QUFBQTtBQUtoQ08sK0JBTGdDLEdBS3BCLENBQUMsWUFBRCxFQUFlLFlBQWYsQ0FMb0I7O0FBTXRDLDBCQUFJTCxXQUFKLEVBQWlCSyxVQUFVQyxJQUFWLGtCQUFrQixDQUFDLGFBQUQsRUFBZ0IsZUFBaEIsQ0FBbEI7QUFDakIsMEJBQUlQLGNBQWMsUUFBbEIsRUFBNEJNLFVBQVVDLElBQVYsQ0FBZSxXQUFmO0FBQ3RCQyw4QkFSZ0MsR0FRckIsQ0FBQyxVQUFELEVBQWEsWUFBYixDQVJxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkRBVW5CRixTQVZtQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVUzQkcsMEJBVjJCO0FBQUE7QUFBQSw2QkFXOUJiLEtBQUssZUFBS08sT0FBTCxDQUFhRCxRQUFiLEVBQXVCTyxJQUF2QixDQUFMLEVBQW1DLGVBQUtOLE9BQUwsQ0FBYUosR0FBYixFQUFrQlUsS0FBS0MsT0FBTCxDQUFhLElBQWIsRUFBbUIsR0FBbkIsQ0FBbEIsQ0FBbkMsQ0FYOEI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsOERBYW5CRixRQWJtQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWEzQkMsMkJBYjJCO0FBQUE7QUFBQSw2QkFjOUJiLEtBQUssZUFBS08sT0FBTCxDQUFhRCxRQUFiLEVBQXVCTyxLQUF2QixDQUFMLEVBQW1DLGVBQUtOLE9BQUwsQ0FBYUosR0FBYixFQUFrQixLQUFsQixFQUF5QlUsS0FBekIsQ0FBbkMsQ0FkOEI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFsQyxHQURPOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJmaWxlIjoiaW5pdC9pbml0LXN0YXJ0ZXItZmlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgYXN5bmNPcmEgZnJvbSAnLi4vdXRpbC9vcmEtaGFuZGxlcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpzdGFydGVyLWZpbGVzJyk7XG5cbmV4cG9ydCBjb25zdCBjb3B5ID0gYXN5bmMgKHNvdXJjZSwgdGFyZ2V0KSA9PiB7XG4gIGQoYGNvcHlpbmcgXCIke3NvdXJjZX1cIiAtLT4gXCIke3RhcmdldH1cImApO1xuICBhd2FpdCBmcy5jb3B5KHNvdXJjZSwgdGFyZ2V0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXIsIHsgbGludFN0eWxlLCBjb3B5Q0lGaWxlcyB9KSA9PiB7XG4gIGF3YWl0IGFzeW5jT3JhKCdDb3B5aW5nIFN0YXJ0ZXIgRmlsZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG1wbFBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vdG1wbCcpO1xuXG4gICAgZCgnY3JlYXRpbmcgZGlyZWN0b3J5OicsIHBhdGgucmVzb2x2ZShkaXIsICdzcmMnKSk7XG4gICAgYXdhaXQgZnMubWtkaXJzKHBhdGgucmVzb2x2ZShkaXIsICdzcmMnKSk7XG4gICAgY29uc3Qgcm9vdEZpbGVzID0gWydfZ2l0aWdub3JlJywgJ19jb21waWxlcmMnXTtcbiAgICBpZiAoY29weUNJRmlsZXMpIHJvb3RGaWxlcy5wdXNoKC4uLlsnX3RyYXZpcy55bWwnLCAnX2FwcHZleW9yLnltbCddKTtcbiAgICBpZiAobGludFN0eWxlID09PSAnYWlyYm5iJykgcm9vdEZpbGVzLnB1c2goJ19lc2xpbnRyYycpO1xuICAgIGNvbnN0IHNyY0ZpbGVzID0gWydpbmRleC5qcycsICdpbmRleC5odG1sJ107XG5cbiAgICBmb3IgKGNvbnN0IGZpbGUgb2Ygcm9vdEZpbGVzKSB7XG4gICAgICBhd2FpdCBjb3B5KHBhdGgucmVzb2x2ZSh0bXBsUGF0aCwgZmlsZSksIHBhdGgucmVzb2x2ZShkaXIsIGZpbGUucmVwbGFjZSgvXl8vLCAnLicpKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBzcmNGaWxlcykge1xuICAgICAgYXdhaXQgY29weShwYXRoLnJlc29sdmUodG1wbFBhdGgsIGZpbGUpLCBwYXRoLnJlc29sdmUoZGlyLCAnc3JjJywgZmlsZSkpO1xuICAgIH1cbiAgfSk7XG59O1xuIl19