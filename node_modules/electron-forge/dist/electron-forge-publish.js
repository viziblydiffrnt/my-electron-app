'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

require('./util/terminate');

var _api = require('./api');

var _electronForgeMake = require('./electron-forge-make');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
  var dir, publishOpts;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          dir = process.cwd();

          _commander2.default.version(require('../package.json').version).arguments('[cwd]').option('--auth-token', 'Authorization token for your publisher target (if required)').option('--tag', 'The tag to publish to on GitHub').option('--target [target[,target...]]', 'The comma-separated deployment targets, defaults to "github"').option('--dry-run', 'Triggers a publish dry run which saves state and doesn\'t upload anything').option('--from-dry-run', 'Attempts to publish artifacts from the last saved dry run').allowUnknownOption(true).action(function (cwd) {
            if (!cwd) return;
            if (_path2.default.isAbsolute(cwd) && _fsExtra2.default.existsSync(cwd)) {
              dir = cwd;
            } else if (_fsExtra2.default.existsSync(_path2.default.resolve(dir, cwd))) {
              dir = _path2.default.resolve(dir, cwd);
            }
          }).parse(process.argv);

          publishOpts = {
            dir: dir,
            interactive: true,
            authToken: _commander2.default.authToken,
            tag: _commander2.default.tag,
            dryRun: _commander2.default.dryRun,
            dryRunResume: _commander2.default.fromDryRun
          };

          if (_commander2.default.target) publishOpts.publishTargets = _commander2.default.target.split(',');

          publishOpts.makeOptions = (0, _electronForgeMake.getMakeOptions)();

          _context.next = 7;
          return (0, _api.publish)(publishOpts);

        case 7:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZWN0cm9uLWZvcmdlLXB1Ymxpc2guanMiXSwibmFtZXMiOlsiZGlyIiwicHJvY2VzcyIsImN3ZCIsInZlcnNpb24iLCJyZXF1aXJlIiwiYXJndW1lbnRzIiwib3B0aW9uIiwiYWxsb3dVbmtub3duT3B0aW9uIiwiYWN0aW9uIiwiaXNBYnNvbHV0ZSIsImV4aXN0c1N5bmMiLCJyZXNvbHZlIiwicGFyc2UiLCJhcmd2IiwicHVibGlzaE9wdHMiLCJpbnRlcmFjdGl2ZSIsImF1dGhUb2tlbiIsInRhZyIsImRyeVJ1biIsImRyeVJ1blJlc3VtZSIsImZyb21EcnlSdW4iLCJ0YXJnZXQiLCJwdWJsaXNoVGFyZ2V0cyIsInNwbGl0IiwibWFrZU9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxrRUFBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDS0EsYUFETCxHQUNXQyxRQUFRQyxHQUFSLEVBRFg7O0FBRUMsOEJBQ0dDLE9BREgsQ0FDV0MsUUFBUSxpQkFBUixFQUEyQkQsT0FEdEMsRUFFR0UsU0FGSCxDQUVhLE9BRmIsRUFHR0MsTUFISCxDQUdVLGNBSFYsRUFHMEIsNkRBSDFCLEVBSUdBLE1BSkgsQ0FJVSxPQUpWLEVBSW1CLGlDQUpuQixFQUtHQSxNQUxILENBS1UsK0JBTFYsRUFLMkMsOERBTDNDLEVBTUdBLE1BTkgsQ0FNVSxXQU5WLEVBTXVCLDJFQU52QixFQU9HQSxNQVBILENBT1UsZ0JBUFYsRUFPNEIsMkRBUDVCLEVBUUdDLGtCQVJILENBUXNCLElBUnRCLEVBU0dDLE1BVEgsQ0FTVSxVQUFDTixHQUFELEVBQVM7QUFDZixnQkFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDVixnQkFBSSxlQUFLTyxVQUFMLENBQWdCUCxHQUFoQixLQUF3QixrQkFBR1EsVUFBSCxDQUFjUixHQUFkLENBQTVCLEVBQWdEO0FBQzlDRixvQkFBTUUsR0FBTjtBQUNELGFBRkQsTUFFTyxJQUFJLGtCQUFHUSxVQUFILENBQWMsZUFBS0MsT0FBTCxDQUFhWCxHQUFiLEVBQWtCRSxHQUFsQixDQUFkLENBQUosRUFBMkM7QUFDaERGLG9CQUFNLGVBQUtXLE9BQUwsQ0FBYVgsR0FBYixFQUFrQkUsR0FBbEIsQ0FBTjtBQUNEO0FBQ0YsV0FoQkgsRUFpQkdVLEtBakJILENBaUJTWCxRQUFRWSxJQWpCakI7O0FBbUJNQyxxQkFyQlAsR0FxQnFCO0FBQ2xCZCxvQkFEa0I7QUFFbEJlLHlCQUFhLElBRks7QUFHbEJDLHVCQUFXLG9CQUFRQSxTQUhEO0FBSWxCQyxpQkFBSyxvQkFBUUEsR0FKSztBQUtsQkMsb0JBQVEsb0JBQVFBLE1BTEU7QUFNbEJDLDBCQUFjLG9CQUFRQztBQU5KLFdBckJyQjs7QUE2QkMsY0FBSSxvQkFBUUMsTUFBWixFQUFvQlAsWUFBWVEsY0FBWixHQUE2QixvQkFBUUQsTUFBUixDQUFlRSxLQUFmLENBQXFCLEdBQXJCLENBQTdCOztBQUVwQlQsc0JBQVlVLFdBQVosR0FBMEIsd0NBQTFCOztBQS9CRDtBQUFBLGlCQWlDTyxrQkFBUVYsV0FBUixDQWpDUDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFEIiwiZmlsZSI6ImVsZWN0cm9uLWZvcmdlLXB1Ymxpc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuaW1wb3J0IHsgcHVibGlzaCB9IGZyb20gJy4vYXBpJztcbmltcG9ydCB7IGdldE1ha2VPcHRpb25zIH0gZnJvbSAnLi9lbGVjdHJvbi1mb3JnZS1tYWtlJztcblxuKGFzeW5jICgpID0+IHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tjd2RdJylcbiAgICAub3B0aW9uKCctLWF1dGgtdG9rZW4nLCAnQXV0aG9yaXphdGlvbiB0b2tlbiBmb3IgeW91ciBwdWJsaXNoZXIgdGFyZ2V0IChpZiByZXF1aXJlZCknKVxuICAgIC5vcHRpb24oJy0tdGFnJywgJ1RoZSB0YWcgdG8gcHVibGlzaCB0byBvbiBHaXRIdWInKVxuICAgIC5vcHRpb24oJy0tdGFyZ2V0IFt0YXJnZXRbLHRhcmdldC4uLl1dJywgJ1RoZSBjb21tYS1zZXBhcmF0ZWQgZGVwbG95bWVudCB0YXJnZXRzLCBkZWZhdWx0cyB0byBcImdpdGh1YlwiJylcbiAgICAub3B0aW9uKCctLWRyeS1ydW4nLCAnVHJpZ2dlcnMgYSBwdWJsaXNoIGRyeSBydW4gd2hpY2ggc2F2ZXMgc3RhdGUgYW5kIGRvZXNuXFwndCB1cGxvYWQgYW55dGhpbmcnKVxuICAgIC5vcHRpb24oJy0tZnJvbS1kcnktcnVuJywgJ0F0dGVtcHRzIHRvIHB1Ymxpc2ggYXJ0aWZhY3RzIGZyb20gdGhlIGxhc3Qgc2F2ZWQgZHJ5IHJ1bicpXG4gICAgLmFsbG93VW5rbm93bk9wdGlvbih0cnVlKVxuICAgIC5hY3Rpb24oKGN3ZCkgPT4ge1xuICAgICAgaWYgKCFjd2QpIHJldHVybjtcbiAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUoY3dkKSAmJiBmcy5leGlzdHNTeW5jKGN3ZCkpIHtcbiAgICAgICAgZGlyID0gY3dkO1xuICAgICAgfSBlbHNlIGlmIChmcy5leGlzdHNTeW5jKHBhdGgucmVzb2x2ZShkaXIsIGN3ZCkpKSB7XG4gICAgICAgIGRpciA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICBjb25zdCBwdWJsaXNoT3B0cyA9IHtcbiAgICBkaXIsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgYXV0aFRva2VuOiBwcm9ncmFtLmF1dGhUb2tlbixcbiAgICB0YWc6IHByb2dyYW0udGFnLFxuICAgIGRyeVJ1bjogcHJvZ3JhbS5kcnlSdW4sXG4gICAgZHJ5UnVuUmVzdW1lOiBwcm9ncmFtLmZyb21EcnlSdW4sXG4gIH07XG4gIGlmIChwcm9ncmFtLnRhcmdldCkgcHVibGlzaE9wdHMucHVibGlzaFRhcmdldHMgPSBwcm9ncmFtLnRhcmdldC5zcGxpdCgnLCcpO1xuXG4gIHB1Ymxpc2hPcHRzLm1ha2VPcHRpb25zID0gZ2V0TWFrZU9wdGlvbnMoKTtcblxuICBhd2FpdCBwdWJsaXNoKHB1Ymxpc2hPcHRzKTtcbn0pKCk7XG4iXX0=