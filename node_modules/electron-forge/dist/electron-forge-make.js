'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMakeOptions = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

require('./util/terminate');

var _api = require('./api');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/prefer-default-export
var getMakeOptions = exports.getMakeOptions = function getMakeOptions() {
  var dir = process.cwd();
  _commander2.default.version(require('../package.json').version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action(function (cwd) {
    if (!cwd) return;
    if (_path2.default.isAbsolute(cwd) && _fsExtra2.default.existsSync(cwd)) {
      dir = cwd;
    } else if (_fsExtra2.default.existsSync(_path2.default.resolve(dir, cwd))) {
      dir = _path2.default.resolve(dir, cwd);
    }
  }).parse(process.argv);

  var makeOpts = {
    dir: dir,
    interactive: true,
    skipPackage: _commander2.default.skipPackage
  };
  if (_commander2.default.targets) makeOpts.overrideTargets = _commander2.default.targets.split(',');
  if (_commander2.default.arch) makeOpts.arch = _commander2.default.arch;
  if (_commander2.default.platform) makeOpts.platform = _commander2.default.platform;

  return makeOpts;
};

if (process.mainModule === module || global.__LINKED_FORGE__) {
  (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var makeOpts;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            makeOpts = getMakeOptions();
            _context.next = 3;
            return (0, _api.make)(makeOpts);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }))();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZWN0cm9uLWZvcmdlLW1ha2UuanMiXSwibmFtZXMiOlsiZ2V0TWFrZU9wdGlvbnMiLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcmd1bWVudHMiLCJvcHRpb24iLCJhbGxvd1Vua25vd25PcHRpb24iLCJhY3Rpb24iLCJpc0Fic29sdXRlIiwiZXhpc3RzU3luYyIsInJlc29sdmUiLCJwYXJzZSIsImFyZ3YiLCJtYWtlT3B0cyIsImludGVyYWN0aXZlIiwic2tpcFBhY2thZ2UiLCJ0YXJnZXRzIiwib3ZlcnJpZGVUYXJnZXRzIiwic3BsaXQiLCJhcmNoIiwicGxhdGZvcm0iLCJtYWluTW9kdWxlIiwibW9kdWxlIiwiZ2xvYmFsIiwiX19MSU5LRURfRk9SR0VfXyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7O0FBRUE7QUFDTyxJQUFNQSwwQ0FBaUIsU0FBakJBLGNBQWlCLEdBQU07QUFDbEMsTUFBSUMsTUFBTUMsUUFBUUMsR0FBUixFQUFWO0FBQ0Esc0JBQ0dDLE9BREgsQ0FDV0MsUUFBUSxpQkFBUixFQUEyQkQsT0FEdEMsRUFFR0UsU0FGSCxDQUVhLE9BRmIsRUFHR0MsTUFISCxDQUdVLGdCQUhWLEVBRzRCLG9DQUg1QixFQUlHQSxNQUpILENBSVUsbUJBSlYsRUFJK0IscUJBSi9CLEVBS0dBLE1BTEgsQ0FLVSwyQkFMVixFQUt1Qyx1QkFMdkMsRUFNR0EsTUFOSCxDQU1VLHFCQU5WLEVBTWlDLHlDQU5qQyxFQU9HQyxrQkFQSCxDQU9zQixJQVB0QixFQVFHQyxNQVJILENBUVUsVUFBQ04sR0FBRCxFQUFTO0FBQ2YsUUFBSSxDQUFDQSxHQUFMLEVBQVU7QUFDVixRQUFJLGVBQUtPLFVBQUwsQ0FBZ0JQLEdBQWhCLEtBQXdCLGtCQUFHUSxVQUFILENBQWNSLEdBQWQsQ0FBNUIsRUFBZ0Q7QUFDOUNGLFlBQU1FLEdBQU47QUFDRCxLQUZELE1BRU8sSUFBSSxrQkFBR1EsVUFBSCxDQUFjLGVBQUtDLE9BQUwsQ0FBYVgsR0FBYixFQUFrQkUsR0FBbEIsQ0FBZCxDQUFKLEVBQTJDO0FBQ2hERixZQUFNLGVBQUtXLE9BQUwsQ0FBYVgsR0FBYixFQUFrQkUsR0FBbEIsQ0FBTjtBQUNEO0FBQ0YsR0FmSCxFQWdCR1UsS0FoQkgsQ0FnQlNYLFFBQVFZLElBaEJqQjs7QUFrQkEsTUFBTUMsV0FBVztBQUNmZCxZQURlO0FBRWZlLGlCQUFhLElBRkU7QUFHZkMsaUJBQWEsb0JBQVFBO0FBSE4sR0FBakI7QUFLQSxNQUFJLG9CQUFRQyxPQUFaLEVBQXFCSCxTQUFTSSxlQUFULEdBQTJCLG9CQUFRRCxPQUFSLENBQWdCRSxLQUFoQixDQUFzQixHQUF0QixDQUEzQjtBQUNyQixNQUFJLG9CQUFRQyxJQUFaLEVBQWtCTixTQUFTTSxJQUFULEdBQWdCLG9CQUFRQSxJQUF4QjtBQUNsQixNQUFJLG9CQUFRQyxRQUFaLEVBQXNCUCxTQUFTTyxRQUFULEdBQW9CLG9CQUFRQSxRQUE1Qjs7QUFFdEIsU0FBT1AsUUFBUDtBQUNELENBOUJNOztBQWdDUCxJQUFJYixRQUFRcUIsVUFBUixLQUF1QkMsTUFBdkIsSUFBaUNDLE9BQU9DLGdCQUE1QyxFQUE4RDtBQUM1RCxvRUFBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDT1gsb0JBRFAsR0FDa0JmLGdCQURsQjtBQUFBO0FBQUEsbUJBR08sZUFBS2UsUUFBTCxDQUhQOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUQ7QUFLRCIsImZpbGUiOiJlbGVjdHJvbi1mb3JnZS1tYWtlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcbmltcG9ydCB7IG1ha2UgfSBmcm9tICcuL2FwaSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgY29uc3QgZ2V0TWFrZU9wdGlvbnMgPSAoKSA9PiB7XG4gIGxldCBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuICBwcm9ncmFtXG4gICAgLnZlcnNpb24ocmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbilcbiAgICAuYXJndW1lbnRzKCdbY3dkXScpXG4gICAgLm9wdGlvbignLS1za2lwLXBhY2thZ2UnLCAnQXNzdW1lIHRoZSBhcHAgaXMgYWxyZWFkeSBwYWNrYWdlZCcpXG4gICAgLm9wdGlvbignLWEsIC0tYXJjaCBbYXJjaF0nLCAnVGFyZ2V0IGFyY2hpdGVjdHVyZScpXG4gICAgLm9wdGlvbignLXAsIC0tcGxhdGZvcm0gW3BsYXRmb3JtXScsICdUYXJnZXQgYnVpbGQgcGxhdGZvcm0nKVxuICAgIC5vcHRpb24oJy0tdGFyZ2V0cyBbdGFyZ2V0c10nLCAnT3ZlcnJpZGUgeW91ciBtYWtlIHRhcmdldHMgZm9yIHRoaXMgcnVuJylcbiAgICAuYWxsb3dVbmtub3duT3B0aW9uKHRydWUpXG4gICAgLmFjdGlvbigoY3dkKSA9PiB7XG4gICAgICBpZiAoIWN3ZCkgcmV0dXJuO1xuICAgICAgaWYgKHBhdGguaXNBYnNvbHV0ZShjd2QpICYmIGZzLmV4aXN0c1N5bmMoY3dkKSkge1xuICAgICAgICBkaXIgPSBjd2Q7XG4gICAgICB9IGVsc2UgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5yZXNvbHZlKGRpciwgY3dkKSkpIHtcbiAgICAgICAgZGlyID0gcGF0aC5yZXNvbHZlKGRpciwgY3dkKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IG1ha2VPcHRzID0ge1xuICAgIGRpcixcbiAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICBza2lwUGFja2FnZTogcHJvZ3JhbS5za2lwUGFja2FnZSxcbiAgfTtcbiAgaWYgKHByb2dyYW0udGFyZ2V0cykgbWFrZU9wdHMub3ZlcnJpZGVUYXJnZXRzID0gcHJvZ3JhbS50YXJnZXRzLnNwbGl0KCcsJyk7XG4gIGlmIChwcm9ncmFtLmFyY2gpIG1ha2VPcHRzLmFyY2ggPSBwcm9ncmFtLmFyY2g7XG4gIGlmIChwcm9ncmFtLnBsYXRmb3JtKSBtYWtlT3B0cy5wbGF0Zm9ybSA9IHByb2dyYW0ucGxhdGZvcm07XG5cbiAgcmV0dXJuIG1ha2VPcHRzO1xufTtcblxuaWYgKHByb2Nlc3MubWFpbk1vZHVsZSA9PT0gbW9kdWxlIHx8IGdsb2JhbC5fX0xJTktFRF9GT1JHRV9fKSB7XG4gIChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbWFrZU9wdHMgPSBnZXRNYWtlT3B0aW9ucygpO1xuXG4gICAgYXdhaXQgbWFrZShtYWtlT3B0cyk7XG4gIH0pKCk7XG59XG4iXX0=