'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

require('colors');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _forgeConfig = require('../util/forge-config');

var _forgeConfig2 = _interopRequireDefault(_forgeConfig);

var _readPackageJson = require('../util/read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

var _requireSearch = require('../util/require-search');

var _requireSearch2 = _interopRequireDefault(_requireSearch);

var _resolveDir = require('../util/resolve-dir');

var _resolveDir2 = _interopRequireDefault(_resolveDir);

var _publishState = require('../util/publish-state');

var _publishState2 = _interopRequireDefault(_publishState);

var _make = require('./make');

var _make2 = _interopRequireDefault(_make);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var d = (0, _debug2.default)('electron-forge:publish');

/**
 * @typedef {Object} PublishOptions
 * @property {string} [dir=process.cwd()] The path to the app to be published
 * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually
 * @property {string} [authToken] An authentication token to use when publishing
 * @property {string} [tag=packageJSON.version] The string to tag this release with
 * @property {Array<string>} [publishTargets=[github]] The publish targets
 * @property {MakeOptions} [makeOptions] Options object to passed through to make()
 * @property {string} [outDir=`${dir}/out`] The path to the directory containing generated distributables
 * @property {boolean} [dryRun=false] Whether to generate dry run meta data but not actually publish
 * @property {boolean} [dryRunResume=false] Whether or not to attempt to resume a previously saved `dryRun` and publish
 * @property {MakeResult} [makeResults=null] Provide results from make so that the publish step doesn't run make itself
 */

/**
 * Publish an Electron application into the given target service.
 *
 * @param {PublishOptions} providedOptions - Options for the Publish method
 * @return {Promise} Will resolve when the publish process is complete
 */
var publish = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _Object$assign, dir, interactive, authToken, tag, publishTargets, makeOptions, dryRun, dryRunResume, makeResults, outDir, dryRunDir, packageJSON, forgeConfig, publishes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, publishStates, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, makeResult, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, makePath, artifacts, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop, _iterator4, _step4;

    return _regenerator2.default.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            // eslint-disable-next-line prefer-const, no-unused-vars
            _Object$assign = (0, _assign2.default)({
              dir: process.cwd(),
              interactive: false,
              tag: null,
              makeOptions: {},
              publishTargets: null,
              dryRun: false,
              dryRunResume: false,
              makeResults: null
            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, authToken = _Object$assign.authToken, tag = _Object$assign.tag, publishTargets = _Object$assign.publishTargets, makeOptions = _Object$assign.makeOptions, dryRun = _Object$assign.dryRun, dryRunResume = _Object$assign.dryRunResume, makeResults = _Object$assign.makeResults;

            _oraHandler2.default.interactive = interactive;

            outDir = providedOptions.outDir || _path2.default.resolve(dir, 'out');
            dryRunDir = _path2.default.resolve(outDir, 'publish-dry-run');

            if (!(dryRun && dryRunResume)) {
              _context3.next = 6;
              break;
            }

            throw 'Can\'t dry run and resume a dry run at the same time';

          case 6:
            if (!(dryRunResume && makeResults)) {
              _context3.next = 8;
              break;
            }

            throw 'Can\'t resume a dry run and use the provided makeResults at the same time';

          case 8:
            _context3.next = 10;
            return (0, _readPackageJson2.default)(dir);

          case 10:
            packageJSON = _context3.sent;
            _context3.next = 13;
            return (0, _forgeConfig2.default)(dir);

          case 13:
            forgeConfig = _context3.sent;

            if (!dryRunResume) {
              _context3.next = 49;
              break;
            }

            d('attempting to resume from dry run');
            _context3.next = 18;
            return _publishState2.default.loadFromDirectory(dryRunDir);

          case 18:
            publishes = _context3.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context3.prev = 22;
            _iterator = (0, _getIterator3.default)(publishes);

          case 24:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context3.next = 32;
              break;
            }

            publishStates = _step.value;

            d('publishing for given state set');
            _context3.next = 29;
            return publish({
              dir: dir,
              interactive: interactive,
              authToken: authToken,
              tag: tag,
              publishTargets: publishTargets,
              makeOptions: makeOptions,
              dryRun: false,
              dryRunResume: false,
              makeResults: publishStates.map(function (_ref2) {
                var state = _ref2.state;
                return state;
              })
            });

          case 29:
            _iteratorNormalCompletion = true;
            _context3.next = 24;
            break;

          case 32:
            _context3.next = 38;
            break;

          case 34:
            _context3.prev = 34;
            _context3.t0 = _context3['catch'](22);
            _didIteratorError = true;
            _iteratorError = _context3.t0;

          case 38:
            _context3.prev = 38;
            _context3.prev = 39;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 41:
            _context3.prev = 41;

            if (!_didIteratorError) {
              _context3.next = 44;
              break;
            }

            throw _iteratorError;

          case 44:
            return _context3.finish(41);

          case 45:
            return _context3.finish(38);

          case 46:
            return _context3.abrupt('return');

          case 49:
            if (makeResults) {
              _context3.next = 56;
              break;
            }

            d('triggering make');
            _context3.next = 53;
            return (0, _make2.default)((0, _assign2.default)({
              dir: dir,
              interactive: interactive
            }, makeOptions));

          case 53:
            makeResults = _context3.sent;
            _context3.next = 112;
            break;

          case 56:
            // Restore values from dry run
            d('restoring publish settings from dry run');

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context3.prev = 60;
            _iterator2 = (0, _getIterator3.default)(makeResults);

          case 62:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context3.next = 98;
              break;
            }

            makeResult = _step2.value;

            packageJSON = makeResult.packageJSON;
            makeOptions.platform = makeResult.platform;
            makeOptions.arch = makeResult.arch;

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context3.prev = 70;
            _iterator3 = (0, _getIterator3.default)(makeResult.artifacts);

          case 72:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context3.next = 81;
              break;
            }

            makePath = _step3.value;
            _context3.next = 76;
            return _fsExtra2.default.exists(makePath);

          case 76:
            if (_context3.sent) {
              _context3.next = 78;
              break;
            }

            throw 'Attempted to resume a dry run but an artifact (' + makePath + ') could not be found';

          case 78:
            _iteratorNormalCompletion3 = true;
            _context3.next = 72;
            break;

          case 81:
            _context3.next = 87;
            break;

          case 83:
            _context3.prev = 83;
            _context3.t1 = _context3['catch'](70);
            _didIteratorError3 = true;
            _iteratorError3 = _context3.t1;

          case 87:
            _context3.prev = 87;
            _context3.prev = 88;

            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }

          case 90:
            _context3.prev = 90;

            if (!_didIteratorError3) {
              _context3.next = 93;
              break;
            }

            throw _iteratorError3;

          case 93:
            return _context3.finish(90);

          case 94:
            return _context3.finish(87);

          case 95:
            _iteratorNormalCompletion2 = true;
            _context3.next = 62;
            break;

          case 98:
            _context3.next = 104;
            break;

          case 100:
            _context3.prev = 100;
            _context3.t2 = _context3['catch'](60);
            _didIteratorError2 = true;
            _iteratorError2 = _context3.t2;

          case 104:
            _context3.prev = 104;
            _context3.prev = 105;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 107:
            _context3.prev = 107;

            if (!_didIteratorError2) {
              _context3.next = 110;
              break;
            }

            throw _iteratorError2;

          case 110:
            return _context3.finish(107);

          case 111:
            return _context3.finish(104);

          case 112:
            if (!dryRun) {
              _context3.next = 119;
              break;
            }

            d('saving results of make in dry run state', makeResults);
            _context3.next = 116;
            return _fsExtra2.default.remove(dryRunDir);

          case 116:
            _context3.next = 118;
            return _publishState2.default.saveToDirectory(dryRunDir, makeResults);

          case 118:
            return _context3.abrupt('return');

          case 119:
            _context3.next = 121;
            return (0, _resolveDir2.default)(dir);

          case 121:
            dir = _context3.sent;

            if (dir) {
              _context3.next = 124;
              break;
            }

            throw 'Failed to locate publishable Electron application';

          case 124:
            artifacts = makeResults.reduce(function (accum, makeResult) {
              accum.push.apply(accum, (0, _toConsumableArray3.default)(makeResult.artifacts));
              return accum;
            }, []);


            if (publishTargets === null) {
              publishTargets = forgeConfig.publish_targets[makeOptions.platform || process.platform];
            }

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context3.prev = 129;
            _loop = /*#__PURE__*/_regenerator2.default.mark(function _loop() {
              var publishTarget, publisher;
              return _regenerator2.default.wrap(function _loop$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      publishTarget = _step4.value;
                      publisher = void 0;
                      _context2.next = 4;
                      return (0, _oraHandler2.default)('Resolving publish target: ' + ('' + publishTarget).cyan, (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                        return _regenerator2.default.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                // eslint-disable-line no-loop-func
                                publisher = (0, _requireSearch2.default)(__dirname, ['../publishers/' + publishTarget + '.js', 'electron-forge-publisher-' + publishTarget, publishTarget, _path2.default.resolve(dir, publishTarget), _path2.default.resolve(dir, 'node_modules', publishTarget)]);

                                if (publisher) {
                                  _context.next = 3;
                                  break;
                                }

                                throw 'Could not find a publish target with the name: ' + publishTarget;

                              case 3:
                              case 'end':
                                return _context.stop();
                            }
                          }
                        }, _callee, undefined);
                      })));

                    case 4:
                      _context2.next = 6;
                      return publisher(artifacts, packageJSON, forgeConfig, authToken, tag, makeOptions.platform || process.platform, makeOptions.arch || process.arch);

                    case 6:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _loop, undefined);
            });
            _iterator4 = (0, _getIterator3.default)(publishTargets);

          case 132:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context3.next = 137;
              break;
            }

            return _context3.delegateYield(_loop(), 't3', 134);

          case 134:
            _iteratorNormalCompletion4 = true;
            _context3.next = 132;
            break;

          case 137:
            _context3.next = 143;
            break;

          case 139:
            _context3.prev = 139;
            _context3.t4 = _context3['catch'](129);
            _didIteratorError4 = true;
            _iteratorError4 = _context3.t4;

          case 143:
            _context3.prev = 143;
            _context3.prev = 144;

            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }

          case 146:
            _context3.prev = 146;

            if (!_didIteratorError4) {
              _context3.next = 149;
              break;
            }

            throw _iteratorError4;

          case 149:
            return _context3.finish(146);

          case 150:
            return _context3.finish(143);

          case 151:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee2, undefined, [[22, 34, 38, 46], [39,, 41, 45], [60, 100, 104, 112], [70, 83, 87, 95], [88,, 90, 94], [105,, 107, 111], [129, 139, 143, 151], [144,, 146, 150]]);
  }));

  return function publish() {
    return _ref.apply(this, arguments);
  };
}();

exports.default = publish;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,