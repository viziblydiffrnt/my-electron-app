'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _initCustom = require('../init/init-custom');

var _initCustom2 = _interopRequireDefault(_initCustom);

var _initDirectory = require('../init/init-directory');

var _initDirectory2 = _interopRequireDefault(_initDirectory);

var _initGit = require('../init/init-git');

var _initGit2 = _interopRequireDefault(_initGit);

var _initNpm = require('../init/init-npm');

var _initNpm2 = _interopRequireDefault(_initNpm);

var _initStandardFix = require('../init/init-standard-fix');

var _initStandardFix2 = _interopRequireDefault(_initStandardFix);

var _initStarterFiles = require('../init/init-starter-files');

var _initStarterFiles2 = _interopRequireDefault(_initStarterFiles);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var d = (0, _debug2.default)('electron-forge:init');

/**
 * @typedef {Object} InitOptions
 * @property {string} [dir=process.cwd()] The path to the app to be initialized
 * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually
 * @property {string} [lintStyle=airbnb] The lintStyle to pass through to the template creator
 * @property {boolean} [copyCIFiles=false] Whether to copy Travis and AppVeyor CI files
 * @property {string} [template] The custom template to use. If left empty, the default template is used
 */

/**
 * Initialize a new Electron Forge template project in the given directory.
 *
 * @param {InitOptions} providedOptions - Options for the init method
 * @return {Promise} Will resolve when the initialization process is complete
 */

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _Object$assign, dir, interactive, lintStyle, copyCIFiles, template;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // eslint-disable-next-line prefer-const, no-unused-vars
            _Object$assign = (0, _assign2.default)({
              dir: process.cwd(),
              interactive: false,
              lintStyle: 'airbnb',
              copyCIFiles: false,
              template: null
            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, lintStyle = _Object$assign.lintStyle, copyCIFiles = _Object$assign.copyCIFiles, template = _Object$assign.template;

            _oraHandler2.default.interactive = interactive;

            d('Initializing in: ' + dir);

            if (!template) {
              lintStyle = lintStyle.toLowerCase();
              if (!['airbnb', 'standard'].includes(lintStyle)) {
                d('Unrecognized lintStyle argument: \'' + lintStyle + '\' -- defaulting to \'airbnb\'');
                lintStyle = 'airbnb';
              }
            }

            _context.next = 6;
            return (0, _initDirectory2.default)(dir, interactive);

          case 6:
            _context.next = 8;
            return (0, _initGit2.default)(dir);

          case 8:
            _context.next = 10;
            return (0, _initStarterFiles2.default)(dir, { lintStyle: template ? undefined : lintStyle, copyCIFiles: copyCIFiles });

          case 10:
            _context.next = 12;
            return (0, _initNpm2.default)(dir, template ? undefined : lintStyle);

          case 12:
            if (template) {
              _context.next = 18;
              break;
            }

            if (!(lintStyle === 'standard')) {
              _context.next = 16;
              break;
            }

            _context.next = 16;
            return (0, _initStandardFix2.default)(dir);

          case 16:
            _context.next = 20;
            break;

          case 18:
            _context.next = 20;
            return (0, _initCustom2.default)(dir, template, lintStyle);

          case 20:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function () {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9pbml0LmpzIl0sIm5hbWVzIjpbImQiLCJwcm92aWRlZE9wdGlvbnMiLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwiaW50ZXJhY3RpdmUiLCJsaW50U3R5bGUiLCJjb3B5Q0lGaWxlcyIsInRlbXBsYXRlIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUVBLElBQU1BLElBQUkscUJBQU0scUJBQU4sQ0FBVjs7QUFFQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7OytFQU1lO0FBQUEsUUFBT0MsZUFBUCx1RUFBeUIsRUFBekI7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYjtBQURhLDZCQUVnRCxzQkFBYztBQUN6RUMsbUJBQUtDLFFBQVFDLEdBQVIsRUFEb0U7QUFFekVDLDJCQUFhLEtBRjREO0FBR3pFQyx5QkFBVyxRQUg4RDtBQUl6RUMsMkJBQWEsS0FKNEQ7QUFLekVDLHdCQUFVO0FBTCtELGFBQWQsRUFNMURQLGVBTjBELENBRmhELEVBRVBDLEdBRk8sa0JBRVBBLEdBRk8sRUFFRkcsV0FGRSxrQkFFRkEsV0FGRSxFQUVXQyxTQUZYLGtCQUVXQSxTQUZYLEVBRXNCQyxXQUZ0QixrQkFFc0JBLFdBRnRCLEVBRW1DQyxRQUZuQyxrQkFFbUNBLFFBRm5DOztBQVNiLGlDQUFTSCxXQUFULEdBQXVCQSxXQUF2Qjs7QUFFQUwsb0NBQXNCRSxHQUF0Qjs7QUFFQSxnQkFBSSxDQUFDTSxRQUFMLEVBQWU7QUFDYkYsMEJBQVlBLFVBQVVHLFdBQVYsRUFBWjtBQUNBLGtCQUFJLENBQUMsQ0FBQyxRQUFELEVBQVcsVUFBWCxFQUF1QkMsUUFBdkIsQ0FBZ0NKLFNBQWhDLENBQUwsRUFBaUQ7QUFDL0NOLDBEQUF1Q00sU0FBdkM7QUFDQUEsNEJBQVksUUFBWjtBQUNEO0FBQ0Y7O0FBbkJZO0FBQUEsbUJBcUJQLDZCQUFjSixHQUFkLEVBQW1CRyxXQUFuQixDQXJCTzs7QUFBQTtBQUFBO0FBQUEsbUJBc0JQLHVCQUFRSCxHQUFSLENBdEJPOztBQUFBO0FBQUE7QUFBQSxtQkF1QlAsZ0NBQVlBLEdBQVosRUFBaUIsRUFBRUksV0FBV0UsV0FBV0csU0FBWCxHQUF1QkwsU0FBcEMsRUFBK0NDLHdCQUEvQyxFQUFqQixDQXZCTzs7QUFBQTtBQUFBO0FBQUEsbUJBd0JQLHVCQUFRTCxHQUFSLEVBQWFNLFdBQVdHLFNBQVgsR0FBdUJMLFNBQXBDLENBeEJPOztBQUFBO0FBQUEsZ0JBeUJSRSxRQXpCUTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxrQkEwQlBGLGNBQWMsVUExQlA7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxtQkEyQkgsK0JBQWdCSixHQUFoQixDQTNCRzs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLG1CQThCTCwwQkFBV0EsR0FBWCxFQUFnQk0sUUFBaEIsRUFBMEJGLFNBQTFCLENBOUJLOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJmaWxlIjoiYXBpL2luaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5pbXBvcnQgaW5pdEN1c3RvbSBmcm9tICcuLi9pbml0L2luaXQtY3VzdG9tJztcbmltcG9ydCBpbml0RGlyZWN0b3J5IGZyb20gJy4uL2luaXQvaW5pdC1kaXJlY3RvcnknO1xuaW1wb3J0IGluaXRHaXQgZnJvbSAnLi4vaW5pdC9pbml0LWdpdCc7XG5pbXBvcnQgaW5pdE5QTSBmcm9tICcuLi9pbml0L2luaXQtbnBtJztcbmltcG9ydCBpbml0U3RhbmRhcmRGaXggZnJvbSAnLi4vaW5pdC9pbml0LXN0YW5kYXJkLWZpeCc7XG5pbXBvcnQgaW5pdFN0YXJ0ZXIgZnJvbSAnLi4vaW5pdC9pbml0LXN0YXJ0ZXItZmlsZXMnO1xuXG5pbXBvcnQgYXN5bmNPcmEgZnJvbSAnLi4vdXRpbC9vcmEtaGFuZGxlcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdCcpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluaXRPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2Rpcj1wcm9jZXNzLmN3ZCgpXSBUaGUgcGF0aCB0byB0aGUgYXBwIHRvIGJlIGluaXRpYWxpemVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnRlcmFjdGl2ZT1mYWxzZV0gV2hldGhlciB0byB1c2Ugc2Vuc2libGUgZGVmYXVsdHMgb3IgcHJvbXB0IHRoZSB1c2VyIHZpc3VhbGx5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xpbnRTdHlsZT1haXJibmJdIFRoZSBsaW50U3R5bGUgdG8gcGFzcyB0aHJvdWdoIHRvIHRoZSB0ZW1wbGF0ZSBjcmVhdG9yXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjb3B5Q0lGaWxlcz1mYWxzZV0gV2hldGhlciB0byBjb3B5IFRyYXZpcyBhbmQgQXBwVmV5b3IgQ0kgZmlsZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGVtcGxhdGVdIFRoZSBjdXN0b20gdGVtcGxhdGUgdG8gdXNlLiBJZiBsZWZ0IGVtcHR5LCB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBpcyB1c2VkXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIEZvcmdlIHRlbXBsYXRlIHByb2plY3QgaW4gdGhlIGdpdmVuIGRpcmVjdG9yeS5cbiAqXG4gKiBAcGFyYW0ge0luaXRPcHRpb25zfSBwcm92aWRlZE9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgaW5pdCBtZXRob2RcbiAqIEByZXR1cm4ge1Byb21pc2V9IFdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBpbml0aWFsaXphdGlvbiBwcm9jZXNzIGlzIGNvbXBsZXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChwcm92aWRlZE9wdGlvbnMgPSB7fSkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0LCBuby11bnVzZWQtdmFyc1xuICBsZXQgeyBkaXIsIGludGVyYWN0aXZlLCBsaW50U3R5bGUsIGNvcHlDSUZpbGVzLCB0ZW1wbGF0ZSB9ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgZGlyOiBwcm9jZXNzLmN3ZCgpLFxuICAgIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgICBsaW50U3R5bGU6ICdhaXJibmInLFxuICAgIGNvcHlDSUZpbGVzOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogbnVsbCxcbiAgfSwgcHJvdmlkZWRPcHRpb25zKTtcbiAgYXN5bmNPcmEuaW50ZXJhY3RpdmUgPSBpbnRlcmFjdGl2ZTtcblxuICBkKGBJbml0aWFsaXppbmcgaW46ICR7ZGlyfWApO1xuXG4gIGlmICghdGVtcGxhdGUpIHtcbiAgICBsaW50U3R5bGUgPSBsaW50U3R5bGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIVsnYWlyYm5iJywgJ3N0YW5kYXJkJ10uaW5jbHVkZXMobGludFN0eWxlKSkge1xuICAgICAgZChgVW5yZWNvZ25pemVkIGxpbnRTdHlsZSBhcmd1bWVudDogJyR7bGludFN0eWxlfScgLS0gZGVmYXVsdGluZyB0byAnYWlyYm5iJ2ApO1xuICAgICAgbGludFN0eWxlID0gJ2FpcmJuYic7XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgaW5pdERpcmVjdG9yeShkaXIsIGludGVyYWN0aXZlKTtcbiAgYXdhaXQgaW5pdEdpdChkaXIpO1xuICBhd2FpdCBpbml0U3RhcnRlcihkaXIsIHsgbGludFN0eWxlOiB0ZW1wbGF0ZSA/IHVuZGVmaW5lZCA6IGxpbnRTdHlsZSwgY29weUNJRmlsZXMgfSk7XG4gIGF3YWl0IGluaXROUE0oZGlyLCB0ZW1wbGF0ZSA/IHVuZGVmaW5lZCA6IGxpbnRTdHlsZSk7XG4gIGlmICghdGVtcGxhdGUpIHtcbiAgICBpZiAobGludFN0eWxlID09PSAnc3RhbmRhcmQnKSB7XG4gICAgICBhd2FpdCBpbml0U3RhbmRhcmRGaXgoZGlyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgaW5pdEN1c3RvbShkaXIsIHRlbXBsYXRlLCBsaW50U3R5bGUpO1xuICB9XG59O1xuIl19