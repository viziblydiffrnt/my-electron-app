'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

require('colors');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _electronPackager = require('electron-packager');

var _electronPackager2 = _interopRequireDefault(_electronPackager);

var _targets = require('electron-packager/targets');

var _forgeConfig = require('../util/forge-config');

var _forgeConfig2 = _interopRequireDefault(_forgeConfig);

var _hook = require('../util/hook');

var _hook2 = _interopRequireDefault(_hook);

var _ora = require('../util/ora');

var _ora2 = _interopRequireDefault(_ora);

var _compileHook = require('../util/compile-hook');

var _compileHook2 = _interopRequireDefault(_compileHook);

var _readPackageJson = require('../util/read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

var _rebuild = require('../util/rebuild');

var _rebuild2 = _interopRequireDefault(_rebuild);

var _requireSearch = require('../util/require-search');

var _requireSearch2 = _interopRequireDefault(_requireSearch);

var _resolveDir = require('../util/resolve-dir');

var _resolveDir2 = _interopRequireDefault(_resolveDir);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var d = (0, _debug2.default)('electron-forge:packager');

/**
 * @typedef {Object} PackageOptions
 * @property {string} [dir=process.cwd()] The path to the app to package
 * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually
 * @property {string} [arch=process.arch] The target arch
 * @property {string} [platform=process.platform] The target platform.
 * @property {string} [outDir=`${dir}/out`] The path to the output directory for packaged apps
 */

/**
 * Package an Electron application into an platform dependent format.
 *
 * @param {PackageOptions} providedOptions - Options for the Package method
 * @return {Promise} Will resolve when the package process is complete
 */

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _Object$assign, dir, interactive, arch, platform, ora, outDir, prepareSpinner, prepareCounter, packageJSON, forgeConfig, packagerSpinner, packageOpts;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            // eslint-disable-next-line prefer-const, no-unused-vars
            _Object$assign = (0, _assign2.default)({
              dir: process.cwd(),
              interactive: false,
              arch: (0, _targets.hostArch)(),
              platform: process.platform
            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, arch = _Object$assign.arch, platform = _Object$assign.platform;
            ora = interactive ? _ora2.default : _ora.fakeOra;
            outDir = providedOptions.outDir || _path2.default.resolve(dir, 'out');
            prepareSpinner = ora('Preparing to Package Application for arch: ' + (arch === 'all' ? 'ia32' : arch).cyan).start();
            prepareCounter = 0;
            _context5.next = 7;
            return (0, _resolveDir2.default)(dir);

          case 7:
            dir = _context5.sent;

            if (dir) {
              _context5.next = 10;
              break;
            }

            throw 'Failed to locate compilable Electron application';

          case 10:
            _context5.next = 12;
            return (0, _readPackageJson2.default)(dir);

          case 12:
            packageJSON = _context5.sent;

            if (!(_path2.default.dirname(require.resolve(_path2.default.resolve(dir, packageJSON.main))) === dir)) {
              _context5.next = 16;
              break;
            }

            console.error(('Entry point: ' + packageJSON.main).red);
            throw 'The entry point to your application ("packageJSON.main") must be in a subfolder not in the top level directory';

          case 16:
            _context5.next = 18;
            return (0, _forgeConfig2.default)(dir);

          case 18:
            forgeConfig = _context5.sent;
            packagerSpinner = void 0;
            packageOpts = (0, _assign2.default)({
              asar: false,
              overwrite: true
            }, forgeConfig.electronPackagerConfig, {
              afterCopy: [function () {
                var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee(buildPath, electronVersion, pPlatform, pArch, done) {
                  var bins, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, bin;

                  return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (packagerSpinner) {
                            packagerSpinner.succeed();
                            prepareCounter += 1;
                            prepareSpinner = ora('Preparing to Package Application for arch: ' + (prepareCounter === 2 ? 'armv7l' : 'x64').cyan).start();
                          }
                          _context.next = 3;
                          return _fsExtra2.default.remove(_path2.default.resolve(buildPath, 'node_modules/electron-compile/test'));

                        case 3:
                          _context.next = 5;
                          return (0, _pify2.default)(_glob2.default)(_path2.default.join(buildPath, '**/.bin/**/*'));

                        case 5:
                          bins = _context.sent;
                          _iteratorNormalCompletion = true;
                          _didIteratorError = false;
                          _iteratorError = undefined;
                          _context.prev = 9;
                          _iterator = (0, _getIterator3.default)(bins);

                        case 11:
                          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context.next = 18;
                            break;
                          }

                          bin = _step.value;
                          _context.next = 15;
                          return _fsExtra2.default.remove(bin);

                        case 15:
                          _iteratorNormalCompletion = true;
                          _context.next = 11;
                          break;

                        case 18:
                          _context.next = 24;
                          break;

                        case 20:
                          _context.prev = 20;
                          _context.t0 = _context['catch'](9);
                          _didIteratorError = true;
                          _iteratorError = _context.t0;

                        case 24:
                          _context.prev = 24;
                          _context.prev = 25;

                          if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                          }

                        case 27:
                          _context.prev = 27;

                          if (!_didIteratorError) {
                            _context.next = 30;
                            break;
                          }

                          throw _iteratorError;

                        case 30:
                          return _context.finish(27);

                        case 31:
                          return _context.finish(24);

                        case 32:
                          done();

                        case 33:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, undefined, [[9, 20, 24, 32], [25,, 27, 31]]);
                }));

                return function (_x2, _x3, _x4, _x5, _x6) {
                  return _ref2.apply(this, arguments);
                };
              }(), function () {
                var _ref3 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          prepareSpinner.succeed();
                          _context2.next = 3;
                          return _compileHook2.default.apply(undefined, [dir].concat(args));

                        case 3:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, _callee2, undefined);
                }));

                return function () {
                  return _ref3.apply(this, arguments);
                };
              }(), function () {
                var _ref4 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(buildPath, electronVersion, pPlatform, pArch, done) {
                  return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return (0, _rebuild2.default)(buildPath, electronVersion, pPlatform, pArch);

                        case 2:
                          packagerSpinner = ora('Packaging Application').start();
                          done();

                        case 4:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, undefined);
                }));

                return function (_x7, _x8, _x9, _x10, _x11) {
                  return _ref4.apply(this, arguments);
                };
              }(), function () {
                var _ref5 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(buildPath, electronVersion, pPlatform, pArch, done) {
                  var copiedPackageJSON;
                  return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return (0, _readPackageJson2.default)(buildPath);

                        case 2:
                          copiedPackageJSON = _context4.sent;

                          if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {
                            delete copiedPackageJSON.config.forge;
                          }
                          _context4.next = 6;
                          return _fsExtra2.default.writeFile(_path2.default.resolve(buildPath, 'package.json'), (0, _stringify2.default)(copiedPackageJSON, null, 2));

                        case 6:
                          done();

                        case 7:
                        case 'end':
                          return _context4.stop();
                      }
                    }
                  }, _callee4, undefined);
                }));

                return function (_x12, _x13, _x14, _x15, _x16) {
                  return _ref5.apply(this, arguments);
                };
              }()].concat(forgeConfig.electronPackagerConfig.afterCopy ? forgeConfig.electronPackagerConfig.afterCopy.map(function (item) {
                return typeof item === 'string' ? (0, _requireSearch2.default)(dir, [item]) : item;
              }) : []),
              afterExtract: forgeConfig.electronPackagerConfig.afterExtract ? forgeConfig.electronPackagerConfig.afterExtract.map(function (item) {
                return typeof item === 'string' ? (0, _requireSearch2.default)(dir, [item]) : item;
              }) : [],
              dir: dir,
              arch: arch,
              platform: platform,
              out: outDir,
              electronVersion: packageJSON.devDependencies['electron-prebuilt-compile']
            });

            packageOpts.quiet = true;

            if (!((0, _typeof3.default)(packageOpts.asar) === 'object' && packageOpts.asar.unpack)) {
              _context5.next = 25;
              break;
            }

            packagerSpinner.fail();
            throw new Error('electron-compile does not support asar.unpack yet.  Please use asar.unpackDir');

          case 25:
            _context5.next = 27;
            return (0, _hook2.default)(forgeConfig, 'generateAssets');

          case 27:
            _context5.next = 29;
            return (0, _hook2.default)(forgeConfig, 'prePackage');

          case 29:

            d('packaging with options', packageOpts);

            _context5.next = 32;
            return (0, _electronPackager2.default)(packageOpts);

          case 32:
            _context5.next = 34;
            return (0, _hook2.default)(forgeConfig, 'postPackage');

          case 34:

            packagerSpinner.succeed();

          case 35:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function () {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9wYWNrYWdlLmpzIl0sIm5hbWVzIjpbImQiLCJwcm92aWRlZE9wdGlvbnMiLCJkaXIiLCJwcm9jZXNzIiwiY3dkIiwiaW50ZXJhY3RpdmUiLCJhcmNoIiwicGxhdGZvcm0iLCJvcmEiLCJvdXREaXIiLCJyZXNvbHZlIiwicHJlcGFyZVNwaW5uZXIiLCJjeWFuIiwic3RhcnQiLCJwcmVwYXJlQ291bnRlciIsInBhY2thZ2VKU09OIiwiZGlybmFtZSIsInJlcXVpcmUiLCJtYWluIiwiY29uc29sZSIsImVycm9yIiwicmVkIiwiZm9yZ2VDb25maWciLCJwYWNrYWdlclNwaW5uZXIiLCJwYWNrYWdlT3B0cyIsImFzYXIiLCJvdmVyd3JpdGUiLCJlbGVjdHJvblBhY2thZ2VyQ29uZmlnIiwiYWZ0ZXJDb3B5IiwiYnVpbGRQYXRoIiwiZWxlY3Ryb25WZXJzaW9uIiwicFBsYXRmb3JtIiwicEFyY2giLCJkb25lIiwic3VjY2VlZCIsInJlbW92ZSIsImpvaW4iLCJiaW5zIiwiYmluIiwiYXJncyIsImNvcGllZFBhY2thZ2VKU09OIiwiY29uZmlnIiwiZm9yZ2UiLCJ3cml0ZUZpbGUiLCJjb25jYXQiLCJtYXAiLCJpdGVtIiwiYWZ0ZXJFeHRyYWN0Iiwib3V0IiwiZGV2RGVwZW5kZW5jaWVzIiwicXVpZXQiLCJ1bnBhY2siLCJmYWlsIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxJQUFJLHFCQUFNLHlCQUFOLENBQVY7O0FBRUE7Ozs7Ozs7OztBQVNBOzs7Ozs7OzsrRUFNZTtBQUFBLFFBQU9DLGVBQVAsdUVBQXlCLEVBQXpCOztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFB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QUFBO0FBQUE7QUFBQSxtQkErRVAsb0JBQVFBLFdBQVIsRUFBcUIsWUFBckIsQ0EvRU87O0FBQUE7O0FBaUZidEIsY0FBRSx3QkFBRixFQUE0QndCLFdBQTVCOztBQWpGYTtBQUFBLG1CQW1GUCxnQ0FBU0EsV0FBVCxDQW5GTzs7QUFBQTtBQUFBO0FBQUEsbUJBcUZQLG9CQUFRRixXQUFSLEVBQXFCLGFBQXJCLENBckZPOztBQUFBOztBQXVGYkMsNEJBQWdCVyxPQUFoQjs7QUF2RmE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRyIsImZpbGUiOiJhcGkvcGFja2FnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnY29sb3JzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBwaWZ5IGZyb20gJ3BpZnknO1xuaW1wb3J0IHBhY2thZ2VyIGZyb20gJ2VsZWN0cm9uLXBhY2thZ2VyJztcbmltcG9ydCB7IGhvc3RBcmNoIH0gZnJvbSAnZWxlY3Ryb24tcGFja2FnZXIvdGFyZ2V0cyc7XG5cbmltcG9ydCBnZXRGb3JnZUNvbmZpZyBmcm9tICcuLi91dGlsL2ZvcmdlLWNvbmZpZyc7XG5pbXBvcnQgcnVuSG9vayBmcm9tICcuLi91dGlsL2hvb2snO1xuaW1wb3J0IHJlYWxPcmEsIHsgZmFrZU9yYSB9IGZyb20gJy4uL3V0aWwvb3JhJztcbmltcG9ydCBwYWNrYWdlckNvbXBpbGVIb29rIGZyb20gJy4uL3V0aWwvY29tcGlsZS1ob29rJztcbmltcG9ydCByZWFkUGFja2FnZUpTT04gZnJvbSAnLi4vdXRpbC9yZWFkLXBhY2thZ2UtanNvbic7XG5pbXBvcnQgcmVidWlsZEhvb2sgZnJvbSAnLi4vdXRpbC9yZWJ1aWxkJztcbmltcG9ydCByZXF1aXJlU2VhcmNoIGZyb20gJy4uL3V0aWwvcmVxdWlyZS1zZWFyY2gnO1xuaW1wb3J0IHJlc29sdmVEaXIgZnJvbSAnLi4vdXRpbC9yZXNvbHZlLWRpcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cGFja2FnZXInKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQYWNrYWdlT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtkaXI9cHJvY2Vzcy5jd2QoKV0gVGhlIHBhdGggdG8gdGhlIGFwcCB0byBwYWNrYWdlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbnRlcmFjdGl2ZT1mYWxzZV0gV2hldGhlciB0byB1c2Ugc2Vuc2libGUgZGVmYXVsdHMgb3IgcHJvbXB0IHRoZSB1c2VyIHZpc3VhbGx5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2FyY2g9cHJvY2Vzcy5hcmNoXSBUaGUgdGFyZ2V0IGFyY2hcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhdGZvcm09cHJvY2Vzcy5wbGF0Zm9ybV0gVGhlIHRhcmdldCBwbGF0Zm9ybS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3V0RGlyPWAke2Rpcn0vb3V0YF0gVGhlIHBhdGggdG8gdGhlIG91dHB1dCBkaXJlY3RvcnkgZm9yIHBhY2thZ2VkIGFwcHNcbiAqL1xuXG4vKipcbiAqIFBhY2thZ2UgYW4gRWxlY3Ryb24gYXBwbGljYXRpb24gaW50byBhbiBwbGF0Zm9ybSBkZXBlbmRlbnQgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7UGFja2FnZU9wdGlvbnN9IHByb3ZpZGVkT3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBQYWNrYWdlIG1ldGhvZFxuICogQHJldHVybiB7UHJvbWlzZX0gV2lsbCByZXNvbHZlIHdoZW4gdGhlIHBhY2thZ2UgcHJvY2VzcyBpcyBjb21wbGV0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyAocHJvdmlkZWRPcHRpb25zID0ge30pID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdCwgbm8tdW51c2VkLXZhcnNcbiAgbGV0IHsgZGlyLCBpbnRlcmFjdGl2ZSwgYXJjaCwgcGxhdGZvcm0gfSA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGRpcjogcHJvY2Vzcy5jd2QoKSxcbiAgICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gICAgYXJjaDogaG9zdEFyY2goKSxcbiAgICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcbiAgfSwgcHJvdmlkZWRPcHRpb25zKTtcblxuICBjb25zdCBvcmEgPSBpbnRlcmFjdGl2ZSA/IHJlYWxPcmEgOiBmYWtlT3JhO1xuXG4gIGNvbnN0IG91dERpciA9IHByb3ZpZGVkT3B0aW9ucy5vdXREaXIgfHwgcGF0aC5yZXNvbHZlKGRpciwgJ291dCcpO1xuICBsZXQgcHJlcGFyZVNwaW5uZXIgPSBvcmEoYFByZXBhcmluZyB0byBQYWNrYWdlIEFwcGxpY2F0aW9uIGZvciBhcmNoOiAkeyhhcmNoID09PSAnYWxsJyA/ICdpYTMyJyA6IGFyY2gpLmN5YW59YCkuc3RhcnQoKTtcbiAgbGV0IHByZXBhcmVDb3VudGVyID0gMDtcblxuICBkaXIgPSBhd2FpdCByZXNvbHZlRGlyKGRpcik7XG4gIGlmICghZGlyKSB7XG4gICAgdGhyb3cgJ0ZhaWxlZCB0byBsb2NhdGUgY29tcGlsYWJsZSBFbGVjdHJvbiBhcHBsaWNhdGlvbic7XG4gIH1cblxuICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IHJlYWRQYWNrYWdlSlNPTihkaXIpO1xuXG4gIGlmIChwYXRoLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKHBhdGgucmVzb2x2ZShkaXIsIHBhY2thZ2VKU09OLm1haW4pKSkgPT09IGRpcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVudHJ5IHBvaW50OiAke3BhY2thZ2VKU09OLm1haW59YC5yZWQpO1xuICAgIHRocm93ICdUaGUgZW50cnkgcG9pbnQgdG8geW91ciBhcHBsaWNhdGlvbiAoXCJwYWNrYWdlSlNPTi5tYWluXCIpIG11c3QgYmUgaW4gYSBzdWJmb2xkZXIgbm90IGluIHRoZSB0b3AgbGV2ZWwgZGlyZWN0b3J5JztcbiAgfVxuXG4gIGNvbnN0IGZvcmdlQ29uZmlnID0gYXdhaXQgZ2V0Rm9yZ2VDb25maWcoZGlyKTtcbiAgbGV0IHBhY2thZ2VyU3Bpbm5lcjtcblxuICBjb25zdCBwYWNrYWdlT3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGFzYXI6IGZhbHNlLFxuICAgIG92ZXJ3cml0ZTogdHJ1ZSxcbiAgfSwgZm9yZ2VDb25maWcuZWxlY3Ryb25QYWNrYWdlckNvbmZpZywge1xuICAgIGFmdGVyQ29weTogW2FzeW5jIChidWlsZFBhdGgsIGVsZWN0cm9uVmVyc2lvbiwgcFBsYXRmb3JtLCBwQXJjaCwgZG9uZSkgPT4ge1xuICAgICAgaWYgKHBhY2thZ2VyU3Bpbm5lcikge1xuICAgICAgICBwYWNrYWdlclNwaW5uZXIuc3VjY2VlZCgpO1xuICAgICAgICBwcmVwYXJlQ291bnRlciArPSAxO1xuICAgICAgICBwcmVwYXJlU3Bpbm5lciA9IG9yYShgUHJlcGFyaW5nIHRvIFBhY2thZ2UgQXBwbGljYXRpb24gZm9yIGFyY2g6ICR7KHByZXBhcmVDb3VudGVyID09PSAyID8gJ2FybXY3bCcgOiAneDY0JykuY3lhbn1gKS5zdGFydCgpO1xuICAgICAgfVxuICAgICAgYXdhaXQgZnMucmVtb3ZlKHBhdGgucmVzb2x2ZShidWlsZFBhdGgsICdub2RlX21vZHVsZXMvZWxlY3Ryb24tY29tcGlsZS90ZXN0JykpO1xuICAgICAgY29uc3QgYmlucyA9IGF3YWl0IHBpZnkoZ2xvYikocGF0aC5qb2luKGJ1aWxkUGF0aCwgJyoqLy5iaW4vKiovKicpKTtcbiAgICAgIGZvciAoY29uc3QgYmluIG9mIGJpbnMpIHtcbiAgICAgICAgYXdhaXQgZnMucmVtb3ZlKGJpbik7XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfSwgYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgIHByZXBhcmVTcGlubmVyLnN1Y2NlZWQoKTtcbiAgICAgIGF3YWl0IHBhY2thZ2VyQ29tcGlsZUhvb2soZGlyLCAuLi5hcmdzKTtcbiAgICB9LCBhc3luYyAoYnVpbGRQYXRoLCBlbGVjdHJvblZlcnNpb24sIHBQbGF0Zm9ybSwgcEFyY2gsIGRvbmUpID0+IHtcbiAgICAgIGF3YWl0IHJlYnVpbGRIb29rKGJ1aWxkUGF0aCwgZWxlY3Ryb25WZXJzaW9uLCBwUGxhdGZvcm0sIHBBcmNoKTtcbiAgICAgIHBhY2thZ2VyU3Bpbm5lciA9IG9yYSgnUGFja2FnaW5nIEFwcGxpY2F0aW9uJykuc3RhcnQoKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9LCBhc3luYyAoYnVpbGRQYXRoLCBlbGVjdHJvblZlcnNpb24sIHBQbGF0Zm9ybSwgcEFyY2gsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IGNvcGllZFBhY2thZ2VKU09OID0gYXdhaXQgcmVhZFBhY2thZ2VKU09OKGJ1aWxkUGF0aCk7XG4gICAgICBpZiAoY29waWVkUGFja2FnZUpTT04uY29uZmlnICYmIGNvcGllZFBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZSkge1xuICAgICAgICBkZWxldGUgY29waWVkUGFja2FnZUpTT04uY29uZmlnLmZvcmdlO1xuICAgICAgfVxuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGgucmVzb2x2ZShidWlsZFBhdGgsICdwYWNrYWdlLmpzb24nKSwgSlNPTi5zdHJpbmdpZnkoY29waWVkUGFja2FnZUpTT04sIG51bGwsIDIpKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9XS5jb25jYXQoZm9yZ2VDb25maWcuZWxlY3Ryb25QYWNrYWdlckNvbmZpZy5hZnRlckNvcHkgPyBmb3JnZUNvbmZpZy5lbGVjdHJvblBhY2thZ2VyQ29uZmlnLmFmdGVyQ29weS5tYXAoaXRlbSA9PlxuICAgICAgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyA/IHJlcXVpcmVTZWFyY2goZGlyLCBbaXRlbV0pIDogaXRlbSlcbiAgICApIDogW10pLFxuICAgIGFmdGVyRXh0cmFjdDogZm9yZ2VDb25maWcuZWxlY3Ryb25QYWNrYWdlckNvbmZpZy5hZnRlckV4dHJhY3QgPyBmb3JnZUNvbmZpZy5lbGVjdHJvblBhY2thZ2VyQ29uZmlnLmFmdGVyRXh0cmFjdC5tYXAoaXRlbSA9PlxuICAgICAgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyA/IHJlcXVpcmVTZWFyY2goZGlyLCBbaXRlbV0pIDogaXRlbSlcbiAgICApIDogW10sXG4gICAgZGlyLFxuICAgIGFyY2gsXG4gICAgcGxhdGZvcm0sXG4gICAgb3V0OiBvdXREaXIsXG4gICAgZWxlY3Ryb25WZXJzaW9uOiBwYWNrYWdlSlNPTi5kZXZEZXBlbmRlbmNpZXNbJ2VsZWN0cm9uLXByZWJ1aWx0LWNvbXBpbGUnXSxcbiAgfSk7XG4gIHBhY2thZ2VPcHRzLnF1aWV0ID0gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBwYWNrYWdlT3B0cy5hc2FyID09PSAnb2JqZWN0JyAmJiBwYWNrYWdlT3B0cy5hc2FyLnVucGFjaykge1xuICAgIHBhY2thZ2VyU3Bpbm5lci5mYWlsKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdlbGVjdHJvbi1jb21waWxlIGRvZXMgbm90IHN1cHBvcnQgYXNhci51bnBhY2sgeWV0LiAgUGxlYXNlIHVzZSBhc2FyLnVucGFja0RpcicpO1xuICB9XG5cbiAgYXdhaXQgcnVuSG9vayhmb3JnZUNvbmZpZywgJ2dlbmVyYXRlQXNzZXRzJyk7XG4gIGF3YWl0IHJ1bkhvb2soZm9yZ2VDb25maWcsICdwcmVQYWNrYWdlJyk7XG5cbiAgZCgncGFja2FnaW5nIHdpdGggb3B0aW9ucycsIHBhY2thZ2VPcHRzKTtcblxuICBhd2FpdCBwYWNrYWdlcihwYWNrYWdlT3B0cyk7XG5cbiAgYXdhaXQgcnVuSG9vayhmb3JnZUNvbmZpZywgJ3Bvc3RQYWNrYWdlJyk7XG5cbiAgcGFja2FnZXJTcGlubmVyLnN1Y2NlZWQoKTtcbn07XG4iXX0=