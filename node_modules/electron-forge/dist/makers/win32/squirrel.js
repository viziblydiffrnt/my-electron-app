'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ensureOutput = require('../../util/ensure-output');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

var _isInstalled = require('../../util/is-installed');

var _isInstalled2 = _interopRequireDefault(_isInstalled);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', (0, _isInstalled2.default)('electron-winstaller'));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
}();

exports.default = function () {
  var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref3) {
    var dir = _ref3.dir,
        appName = _ref3.appName,
        targetArch = _ref3.targetArch,
        forgeConfig = _ref3.forgeConfig,
        packageJSON = _ref3.packageJSON;

    var _require, createWindowsInstaller, outPath, winstallerConfig, artifacts, deltaPath, msiPath;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _require = require('electron-winstaller'), createWindowsInstaller = _require.createWindowsInstaller;
            outPath = _path2.default.resolve(dir, '../make/squirrel.windows/' + targetArch);
            _context2.next = 4;
            return (0, _ensureOutput.ensureDirectory)(outPath);

          case 4:
            winstallerConfig = (0, _assign2.default)({
              name: appName,
              noMsi: true,
              exe: appName + '.exe',
              setupExe: appName + '-' + packageJSON.version + ' Setup.exe'
            }, (0, _configFn2.default)(forgeConfig.electronWinstallerConfig, targetArch), {
              appDirectory: dir,
              outputDirectory: outPath
            });
            _context2.next = 7;
            return createWindowsInstaller(winstallerConfig);

          case 7:
            artifacts = [_path2.default.resolve(outPath, 'RELEASES'), _path2.default.resolve(outPath, winstallerConfig.setupExe || appName + 'Setup.exe'), _path2.default.resolve(outPath, winstallerConfig.name + '-' + packageJSON.version + '-full.nupkg')];
            deltaPath = _path2.default.resolve(outPath, winstallerConfig.name + '-' + packageJSON.version + '-delta.nupkg');
            _context2.t0 = winstallerConfig.remoteReleases;

            if (_context2.t0) {
              _context2.next = 14;
              break;
            }

            _context2.next = 13;
            return _fsExtra2.default.pathExists(deltaPath);

          case 13:
            _context2.t0 = _context2.sent;

          case 14:
            if (!_context2.t0) {
              _context2.next = 16;
              break;
            }

            artifacts.push(deltaPath);

          case 16:
            msiPath = _path2.default.resolve(outPath, winstallerConfig.setupMsi || appName + 'Setup.msi');
            _context2.t1 = !winstallerConfig.noMsi;

            if (!_context2.t1) {
              _context2.next = 22;
              break;
            }

            _context2.next = 21;
            return _fsExtra2.default.pathExists(msiPath);

          case 21:
            _context2.t1 = _context2.sent;

          case 22:
            if (!_context2.t1) {
              _context2.next = 24;
              break;
            }

            artifacts.push(msiPath);

          case 24:
            return _context2.abrupt('return', artifacts);

          case 25:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy93aW4zMi9zcXVpcnJlbC5qcyJdLCJuYW1lcyI6WyJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiZGlyIiwiYXBwTmFtZSIsInRhcmdldEFyY2giLCJmb3JnZUNvbmZpZyIsInBhY2thZ2VKU09OIiwicmVxdWlyZSIsImNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIiLCJvdXRQYXRoIiwicmVzb2x2ZSIsIndpbnN0YWxsZXJDb25maWciLCJuYW1lIiwibm9Nc2kiLCJleGUiLCJzZXR1cEV4ZSIsInZlcnNpb24iLCJlbGVjdHJvbldpbnN0YWxsZXJDb25maWciLCJhcHBEaXJlY3RvcnkiLCJvdXRwdXREaXJlY3RvcnkiLCJhcnRpZmFjdHMiLCJkZWx0YVBhdGgiLCJyZW1vdGVSZWxlYXNlcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFTyxJQUFNQTtBQUFBLCtFQUErQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkNBQVksMkJBQVkscUJBQVosQ0FBWjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUEvQjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFOOzs7Z0ZBRVE7QUFBQSxRQUFTQyxHQUFULFNBQVNBLEdBQVQ7QUFBQSxRQUFjQyxPQUFkLFNBQWNBLE9BQWQ7QUFBQSxRQUF1QkMsVUFBdkIsU0FBdUJBLFVBQXZCO0FBQUEsUUFBbUNDLFdBQW5DLFNBQW1DQSxXQUFuQztBQUFBLFFBQWdEQyxXQUFoRCxTQUFnREEsV0FBaEQ7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFDc0JDLFFBQVEscUJBQVIsQ0FEdEIsRUFDTEMsc0JBREssWUFDTEEsc0JBREs7QUFHUEMsbUJBSE8sR0FHRyxlQUFLQyxPQUFMLENBQWFSLEdBQWIsZ0NBQThDRSxVQUE5QyxDQUhIO0FBQUE7QUFBQSxtQkFJUCxtQ0FBZ0JLLE9BQWhCLENBSk87O0FBQUE7QUFNUEUsNEJBTk8sR0FNWSxzQkFBYztBQUNyQ0Msb0JBQU1ULE9BRCtCO0FBRXJDVSxxQkFBTyxJQUY4QjtBQUdyQ0MsbUJBQVFYLE9BQVIsU0FIcUM7QUFJckNZLHdCQUFhWixPQUFiLFNBQXdCRyxZQUFZVSxPQUFwQztBQUpxQyxhQUFkLEVBS3RCLHdCQUFTWCxZQUFZWSx3QkFBckIsRUFBK0NiLFVBQS9DLENBTHNCLEVBS3NDO0FBQzdEYyw0QkFBY2hCLEdBRCtDO0FBRTdEaUIsK0JBQWlCVjtBQUY0QyxhQUx0QyxDQU5aO0FBQUE7QUFBQSxtQkFnQlBELHVCQUF1QkcsZ0JBQXZCLENBaEJPOztBQUFBO0FBa0JQUyxxQkFsQk8sR0FrQkssQ0FDaEIsZUFBS1YsT0FBTCxDQUFhRCxPQUFiLEVBQXNCLFVBQXRCLENBRGdCLEVBRWhCLGVBQUtDLE9BQUwsQ0FBYUQsT0FBYixFQUFzQkUsaUJBQWlCSSxRQUFqQixJQUFnQ1osT0FBaEMsY0FBdEIsQ0FGZ0IsRUFHaEIsZUFBS08sT0FBTCxDQUFhRCxPQUFiLEVBQXlCRSxpQkFBaUJDLElBQTFDLFNBQWtETixZQUFZVSxPQUE5RCxpQkFIZ0IsQ0FsQkw7QUF1QlBLLHFCQXZCTyxHQXVCSyxlQUFLWCxPQUFMLENBQWFELE9BQWIsRUFBeUJFLGlCQUFpQkMsSUFBMUMsU0FBa0ROLFlBQVlVLE9BQTlELGtCQXZCTDtBQUFBLDJCQXdCVEwsaUJBQWlCVyxjQXhCUjs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLG1CQXdCZ0Msa0JBQUdDLFVBQUgsQ0FBY0YsU0FBZCxDQXhCaEM7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXlCWEQsc0JBQVVJLElBQVYsQ0FBZUgsU0FBZjs7QUF6Qlc7QUEyQlBJLG1CQTNCTyxHQTJCRyxlQUFLZixPQUFMLENBQWFELE9BQWIsRUFBc0JFLGlCQUFpQmUsUUFBakIsSUFBZ0N2QixPQUFoQyxjQUF0QixDQTNCSDtBQUFBLDJCQTRCVCxDQUFDUSxpQkFBaUJFLEtBNUJUOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBNEJ3QixrQkFBR1UsVUFBSCxDQUFjRSxPQUFkLENBNUJ4Qjs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBNkJYTCxzQkFBVUksSUFBVixDQUFlQyxPQUFmOztBQTdCVztBQUFBLDhDQStCTkwsU0EvQk07O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRyIsImZpbGUiOiJtYWtlcnMvd2luMzIvc3F1aXJyZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGVuc3VyZURpcmVjdG9yeSB9IGZyb20gJy4uLy4uL3V0aWwvZW5zdXJlLW91dHB1dCc7XG5pbXBvcnQgY29uZmlnRm4gZnJvbSAnLi4vLi4vdXRpbC9jb25maWctZm4nO1xuaW1wb3J0IGlzSW5zdGFsbGVkIGZyb20gJy4uLy4uL3V0aWwvaXMtaW5zdGFsbGVkJztcblxuZXhwb3J0IGNvbnN0IGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0gPSBhc3luYyAoKSA9PiBpc0luc3RhbGxlZCgnZWxlY3Ryb24td2luc3RhbGxlcicpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBkaXIsIGFwcE5hbWUsIHRhcmdldEFyY2gsIGZvcmdlQ29uZmlnLCBwYWNrYWdlSlNPTiB9KSA9PiB7XG4gIGNvbnN0IHsgY3JlYXRlV2luZG93c0luc3RhbGxlciB9ID0gcmVxdWlyZSgnZWxlY3Ryb24td2luc3RhbGxlcicpO1xuXG4gIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUoZGlyLCBgLi4vbWFrZS9zcXVpcnJlbC53aW5kb3dzLyR7dGFyZ2V0QXJjaH1gKTtcbiAgYXdhaXQgZW5zdXJlRGlyZWN0b3J5KG91dFBhdGgpO1xuXG4gIGNvbnN0IHdpbnN0YWxsZXJDb25maWcgPSBPYmplY3QuYXNzaWduKHtcbiAgICBuYW1lOiBhcHBOYW1lLFxuICAgIG5vTXNpOiB0cnVlLFxuICAgIGV4ZTogYCR7YXBwTmFtZX0uZXhlYCxcbiAgICBzZXR1cEV4ZTogYCR7YXBwTmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufSBTZXR1cC5leGVgLFxuICB9LCBjb25maWdGbihmb3JnZUNvbmZpZy5lbGVjdHJvbldpbnN0YWxsZXJDb25maWcsIHRhcmdldEFyY2gpLCB7XG4gICAgYXBwRGlyZWN0b3J5OiBkaXIsXG4gICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICB9KTtcblxuICBhd2FpdCBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyKHdpbnN0YWxsZXJDb25maWcpO1xuXG4gIGNvbnN0IGFydGlmYWN0cyA9IFtcbiAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgJ1JFTEVBU0VTJyksXG4gICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsIHdpbnN0YWxsZXJDb25maWcuc2V0dXBFeGUgfHwgYCR7YXBwTmFtZX1TZXR1cC5leGVgKSxcbiAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259LWZ1bGwubnVwa2dgKSxcbiAgXTtcbiAgY29uc3QgZGVsdGFQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufS1kZWx0YS5udXBrZ2ApO1xuICBpZiAod2luc3RhbGxlckNvbmZpZy5yZW1vdGVSZWxlYXNlcyB8fCBhd2FpdCBmcy5wYXRoRXhpc3RzKGRlbHRhUGF0aCkpIHtcbiAgICBhcnRpZmFjdHMucHVzaChkZWx0YVBhdGgpO1xuICB9XG4gIGNvbnN0IG1zaVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cE1zaSB8fCBgJHthcHBOYW1lfVNldHVwLm1zaWApO1xuICBpZiAoIXdpbnN0YWxsZXJDb25maWcubm9Nc2kgJiYgYXdhaXQgZnMucGF0aEV4aXN0cyhtc2lQYXRoKSkge1xuICAgIGFydGlmYWN0cy5wdXNoKG1zaVBhdGgpO1xuICB9XG4gIHJldHVybiBhcnRpZmFjdHM7XG59O1xuIl19