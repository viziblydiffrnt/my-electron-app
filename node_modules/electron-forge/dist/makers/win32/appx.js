'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDefaultCertificate = exports.isSupportedOnCurrentPlatform = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var createDefaultCertificate = exports.createDefaultCertificate = function () {
  var _ref2 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(publisherName, _ref3) {
    var certFilePath = _ref3.certFilePath,
        certFileName = _ref3.certFileName,
        install = _ref3.install,
        program = _ref3.program;
    var makeCertOptions;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            makeCertOptions = {
              publisherName: publisherName,
              certFilePath: certFilePath || process.cwd(),
              certFileName: certFileName || 'default',
              install: typeof install === 'boolean' ? install : false,
              program: program || { windowsKit: _path2.default.dirname(findSdkTool('makecert.exe')) }
            };

            if ((0, _sign.isValidPublisherName)(publisherName)) {
              _context2.next = 3;
              break;
            }

            throw new Error('Received invalid publisher name: \'' + publisherName + '\' did not conform to X.500 distinguished name syntax for MakeCert.');

          case 3:
            _context2.next = 5;
            return (0, _sign.makeCert)(makeCertOptions);

          case 5:
            return _context2.abrupt('return', _context2.sent);

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function createDefaultCertificate(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getDistinguishedNameFromAuthor = getDistinguishedNameFromAuthor;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _parseAuthor = require('parse-author');

var _parseAuthor2 = _interopRequireDefault(_parseAuthor);

var _electronWindowsStore = require('electron-windows-store');

var _electronWindowsStore2 = _interopRequireDefault(_electronWindowsStore);

var _sign = require('electron-windows-store/lib/sign');

var _resolveCommand = require('cross-spawn/lib/util/resolveCommand');

var _resolveCommand2 = _interopRequireDefault(_resolveCommand);

var _ensureOutput = require('../../util/ensure-output');

var _configFn = require('../../util/config-fn');

var _configFn2 = _interopRequireDefault(_configFn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// electron-windows-store doesn't set its 'os' field even though it only runs on
// win32
var isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = function () {
  var _ref = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', process.platform === 'win32');

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
}();

// NB: This is not a typo, we require AppXs to be built on 64-bit
// but if we're running in a 32-bit node.js process, we're going to
// be Wow64 redirected
var windowsSdkPath = process.arch === 'x64' ? 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64' : 'C:\\Program Files\\Windows Kits\\10\\bin\\x64';

function findSdkTool(exe) {
  var sdkTool = _path2.default.join(windowsSdkPath, exe);
  if (!_fs2.default.existsSync(sdkTool)) {
    sdkTool = (0, _resolveCommand2.default)(exe, true);
  }

  if (!_fs2.default.existsSync(sdkTool)) {
    throw new Error('Can\'t find ' + exe + ' in PATH. You probably need to install the Windows SDK.');
  }

  return sdkTool;
}

function getDistinguishedNameFromAuthor(author) {
  var publisher = author || '';

  if (typeof publisher === 'string') {
    publisher = (0, _parseAuthor2.default)(publisher);
  }

  if (typeof publisher.name === 'string') {
    publisher = publisher.name;
  }

  if (typeof publisher !== 'string') {
    publisher = '';
  }

  return 'CN=' + publisher;
}

exports.default = function () {
  var _ref4 = (0, _bluebird.coroutine)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref5) {
    var dir = _ref5.dir,
        appName = _ref5.appName,
        targetArch = _ref5.targetArch,
        forgeConfig = _ref5.forgeConfig,
        packageJSON = _ref5.packageJSON;
    var outPath, userConfig, opts, noBeta, err;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            outPath = _path2.default.resolve(dir, '../make/appx/' + targetArch);
            _context3.next = 3;
            return (0, _ensureOutput.ensureDirectory)(outPath);

          case 3:
            userConfig = (0, _configFn2.default)(forgeConfig.windowsStoreConfig, targetArch);
            opts = (0, _assign2.default)({
              publisher: getDistinguishedNameFromAuthor(packageJSON.author),
              flatten: false,
              deploy: false,
              packageVersion: packageJSON.version + '.0',
              packageName: appName.replace(/-/g, ''),
              packageDisplayName: appName,
              packageDescription: packageJSON.description || appName,
              packageExecutable: 'app\\' + appName + '.exe',
              windowsKit: userConfig.windowsKit || _path2.default.dirname(findSdkTool('makeappx.exe'))
            }, userConfig, {
              inputDirectory: dir,
              outputDirectory: outPath
            });

            if (opts.publisher) {
              _context3.next = 7;
              break;
            }

            throw 'Please set config.forge.windowsStoreConfig.publisher or author.name in package.json for the appx target';

          case 7:
            if (opts.devCert) {
              _context3.next = 11;
              break;
            }

            _context3.next = 10;
            return createDefaultCertificate(opts.publisher, { certFilePath: outPath, program: opts });

          case 10:
            opts.devCert = _context3.sent;

          case 11:
            if (!opts.packageVersion.match(/-/)) {
              _context3.next = 19;
              break;
            }

            if (!opts.makeVersionWinStoreCompatible) {
              _context3.next = 17;
              break;
            }

            noBeta = opts.packageVersion.replace(/-.*/, '');

            opts.packageVersion = noBeta + '.0';
            _context3.next = 19;
            break;

          case 17:
            err = "Windows Store version numbers don't support semver beta tags. To" + 'automatically fix this, set makeVersionWinStoreCompatible to true or ' + 'explicitly set packageVersion to a version of the format X.Y.Z.A';
            throw new Error(err);

          case 19:

            delete opts.makeVersionWinStoreCompatible;

            _context3.next = 22;
            return (0, _electronWindowsStore2.default)(opts);

          case 22:
            return _context3.abrupt('return', [_path2.default.resolve(outPath, opts.packageName + '.appx')]);

          case 23:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,